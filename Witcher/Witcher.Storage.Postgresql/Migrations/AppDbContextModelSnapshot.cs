// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Witcher.Storage.MySql;

#nullable disable

namespace Witcher.Storage.MySql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AbilityCreature", b =>
                {
                    b.Property<Guid>("AbilitiesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("char(36)");

                    b.HasKey("AbilitiesId", "CreaturesId");

                    b.HasIndex("CreaturesId");

                    b.ToTable("CreatureAbilities", "Battles");
                });

            modelBuilder.Entity("AbilityCreatureTemplate", b =>
                {
                    b.Property<Guid>("AbilitiesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatureTemplatesId")
                        .HasColumnType("char(36)");

                    b.HasKey("AbilitiesId", "CreatureTemplatesId");

                    b.HasIndex("CreatureTemplatesId");

                    b.ToTable("CreatureTemplateAbilities", "GameRules");
                });

            modelBuilder.Entity("GameImgFile", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ImgFilesId")
                        .HasColumnType("char(36)");

                    b.HasKey("GamesId", "ImgFilesId");

                    b.HasIndex("ImgFilesId");

                    b.ToTable("GameImgFile");
                });

            modelBuilder.Entity("GameTextFile", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TextFilesId")
                        .HasColumnType("char(36)");

                    b.HasKey("GamesId", "TextFilesId");

                    b.HasIndex("TextFilesId");

                    b.ToTable("GameTextFile");
                });

            modelBuilder.Entity("ImgFileUser", b =>
                {
                    b.Property<Guid>("ImgFilesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("ImgFilesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ImgFileUser", "System");
                });

            modelBuilder.Entity("TextFileUser", b =>
                {
                    b.Property<Guid>("TextFilesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("char(36)");

                    b.HasKey("TextFilesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TextFileUser", "System");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Ability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Accuracy")
                        .HasColumnType("int")
                        .HasColumnName("Accuracy")
                        .HasComment("Точность атаки");

                    b.Property<int>("AttackDiceQuantity")
                        .HasColumnType("int")
                        .HasColumnName("AttackDiceQuantity")
                        .HasComment("Количество кубов атаки");

                    b.Property<string>("AttackSkill")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("AttackSkill")
                        .HasComment("Навык атаки");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("int")
                        .HasColumnName("AttackSpeed")
                        .HasComment("Скорость атаки");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DamageModifier")
                        .HasColumnType("int")
                        .HasColumnName("DamageModifier")
                        .HasComment("Модификатор атаки");

                    b.Property<string>("DamageType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("DamageType")
                        .HasComment("Тип урона");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description")
                        .HasComment("Описание способности");

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name")
                        .HasComment("Название способности");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Abilities", "GameRules", t =>
                        {
                            t.HasComment("Способности");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.AppliedCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AbilityId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AbilityId")
                        .HasComment("Айди способности");

                    b.Property<int>("ApplyChance")
                        .HasColumnType("int")
                        .HasColumnName("ApplyChance")
                        .HasComment("Шанс применения");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Condition")
                        .HasComment("Тип состояния");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.ToTable("AppliedConditions", "GameRules", t =>
                        {
                            t.HasComment("Применяемые состояния");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Battle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BattleLog")
                        .HasColumnType("longtext")
                        .HasColumnName("BattleLog")
                        .HasComment("Журнал боя");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description")
                        .HasComment("Описание боя");

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name")
                        .HasComment("Название боя");

                    b.Property<int>("NextInitiative")
                        .HasColumnType("int")
                        .HasColumnName("NextInitiative")
                        .HasComment("Значение инициативы следующего существа");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserGameActivatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserGameActivatedId")
                        .HasComment("Айди активировавшего игру пользователя");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("UserGameActivatedId");

                    b.ToTable("Battles", "Battles", t =>
                        {
                            t.HasComment("Экземпляры");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.BodyPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("BodyPartType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("BodyPartType")
                        .HasComment("Тип части тела");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("DamageModifier")
                        .HasColumnType("double")
                        .HasColumnName("DamageModifer")
                        .HasComment("Модификатор урона");

                    b.Property<int>("HitPenalty")
                        .HasColumnType("int")
                        .HasColumnName("HitPenalty")
                        .HasComment("Пенальти за прицеливание");

                    b.Property<int>("MaxToHit")
                        .HasColumnType("int")
                        .HasColumnName("MaxToHit")
                        .HasComment("Максимальное значение попадания");

                    b.Property<int>("MinToHit")
                        .HasColumnType("int")
                        .HasColumnName("MinToHit")
                        .HasComment("Минимальное значение попадания");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BodyParts", "GameRules", t =>
                        {
                            t.HasComment("Части тела");
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Witcher.Core.Entities.BodyTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description")
                        .HasComment("Описание");

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name")
                        .HasComment("Название шаблона тела");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("BodyTemplates", "GameRules", t =>
                        {
                            t.HasComment("Шаблоны тел");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("BattleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("BattleId")
                        .HasComment("Айди боя");

                    b.Property<int>("Body")
                        .HasColumnType("int")
                        .HasColumnName("Body")
                        .HasComment("Телосложение");

                    b.Property<int>("Cra")
                        .HasColumnType("int")
                        .HasColumnName("Cra")
                        .HasComment("Крафт");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatureTemplateId")
                        .HasComment("Айди шаблона существа");

                    b.Property<string>("CreatureType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CreatureType")
                        .HasComment("Тип существа");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description")
                        .HasComment("Описание шаблона");

                    b.Property<int>("Dex")
                        .HasColumnType("int")
                        .HasColumnName("Dex")
                        .HasComment("Ловкость");

                    b.Property<int>("Emp")
                        .HasColumnType("int")
                        .HasColumnName("Emp")
                        .HasComment("Эмпатия");

                    b.Property<int>("HP")
                        .HasColumnType("int")
                        .HasColumnName("HP")
                        .HasComment("Хиты");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<int>("InitiativeInBattle")
                        .HasColumnType("int")
                        .HasColumnName("InitiativeInBattle")
                        .HasComment("Значение инициативы в битве");

                    b.Property<int>("Int")
                        .HasColumnType("int")
                        .HasColumnName("Int")
                        .HasComment("Интеллект");

                    b.Property<Guid?>("LeadingArmId")
                        .HasColumnType("char(36)")
                        .HasColumnName("LeadingArmId")
                        .HasComment("Айди ведущей руки");

                    b.Property<int>("Luck")
                        .HasColumnType("int")
                        .HasColumnName("Luck")
                        .HasComment("Удача");

                    b.Property<int>("MaxBody")
                        .HasColumnType("int")
                        .HasColumnName("MaxBody")
                        .HasComment("Максимальное телосложение");

                    b.Property<int>("MaxCra")
                        .HasColumnType("int")
                        .HasColumnName("MaxCra")
                        .HasComment("Максимальный крафт");

                    b.Property<int>("MaxDex")
                        .HasColumnType("int")
                        .HasColumnName("MaxDex")
                        .HasComment("Максимальна ловкость");

                    b.Property<int>("MaxEmp")
                        .HasColumnType("int")
                        .HasColumnName("MaxEmp")
                        .HasComment("Максимальная эмпатия");

                    b.Property<int>("MaxHP")
                        .HasColumnType("int")
                        .HasColumnName("MaxHP")
                        .HasComment("Максимальные хиты");

                    b.Property<int>("MaxInt")
                        .HasColumnType("int")
                        .HasColumnName("MaxInt")
                        .HasComment("Максимальный интеллект");

                    b.Property<int>("MaxLuck")
                        .HasColumnType("int")
                        .HasColumnName("MaxLuck")
                        .HasComment("Максимальная удача");

                    b.Property<int>("MaxRef")
                        .HasColumnType("int")
                        .HasColumnName("MaxRef")
                        .HasComment("Максимальные рефлексы");

                    b.Property<int>("MaxSpeed")
                        .HasColumnType("int")
                        .HasColumnName("MaxSpeed")
                        .HasComment("Максимальная скорость");

                    b.Property<int>("MaxSta")
                        .HasColumnType("int")
                        .HasColumnName("MaxSta")
                        .HasComment("Максимальная стамина");

                    b.Property<int>("MaxWill")
                        .HasColumnType("int")
                        .HasColumnName("MaxWill")
                        .HasComment("Максимальная воля");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name")
                        .HasComment("Название существа");

                    b.Property<int>("Ref")
                        .HasColumnType("int")
                        .HasColumnName("Ref")
                        .HasComment("Рефлексы");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<int>("Speed")
                        .HasColumnType("int")
                        .HasColumnName("Speed")
                        .HasComment("Скорость");

                    b.Property<int>("Sta")
                        .HasColumnType("int")
                        .HasColumnName("Sta")
                        .HasComment("Стамина");

                    b.Property<int>("Stun")
                        .HasColumnType("int")
                        .HasColumnName("Stun")
                        .HasComment("Устойчивость");

                    b.Property<bool>("TurnBeginningEffectsAreTriggered")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Will")
                        .HasColumnType("int")
                        .HasColumnName("Will")
                        .HasComment("Воля");

                    b.HasKey("Id");

                    b.HasIndex("BattleId");

                    b.HasIndex("CreatureTemplateId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.ToTable("Creatures", "Battles", t =>
                        {
                            t.HasComment("Существа");
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreatureSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatureId")
                        .HasComment("Айди существа");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int")
                        .HasColumnName("MaxValue")
                        .HasComment("Макксимальное значение навыка");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Skill")
                        .HasComment("Навык");

                    b.Property<int>("SkillValue")
                        .HasColumnType("int")
                        .HasColumnName("SkillValue")
                        .HasComment("Значение навыка");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.ToTable("CreatureSkills", "Battles", t =>
                        {
                            t.HasComment("Навыки существа");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreatureTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Body")
                        .HasColumnType("int")
                        .HasColumnName("Body")
                        .HasComment("Телосложение");

                    b.Property<Guid>("BodyTemplateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("BodyTemplateId")
                        .HasComment("Айди шаблона тела");

                    b.Property<int>("Cra")
                        .HasColumnType("int")
                        .HasColumnName("Cra")
                        .HasComment("Крафт");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatureType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("CreatureType")
                        .HasComment("Тип существа");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description")
                        .HasComment("Описание шаблона");

                    b.Property<int>("Dex")
                        .HasColumnType("int")
                        .HasColumnName("Dex")
                        .HasComment("Ловкость");

                    b.Property<int>("Emp")
                        .HasColumnType("int")
                        .HasColumnName("Emp")
                        .HasComment("Эмпатия");

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<int>("HP")
                        .HasColumnType("int")
                        .HasColumnName("HP")
                        .HasComment("Хиты");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("char(36)")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<int>("Int")
                        .HasColumnType("int")
                        .HasColumnName("Int")
                        .HasComment("Интеллект");

                    b.Property<int>("Luck")
                        .HasColumnType("int")
                        .HasColumnName("Luck")
                        .HasComment("Удача");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name")
                        .HasComment("Название шаблона");

                    b.Property<int>("Ref")
                        .HasColumnType("int")
                        .HasColumnName("Ref")
                        .HasComment("Рефлексы");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<int>("Speed")
                        .HasColumnType("int")
                        .HasColumnName("Speed")
                        .HasComment("Скорость");

                    b.Property<int>("Sta")
                        .HasColumnType("int")
                        .HasColumnName("Sta")
                        .HasComment("Стамина");

                    b.Property<int>("Will")
                        .HasColumnType("int")
                        .HasColumnName("Will")
                        .HasComment("Воля");

                    b.HasKey("Id");

                    b.HasIndex("BodyTemplateId");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.ToTable("CreatureTemplates", "GameRules", t =>
                        {
                            t.HasComment("Шаблоны существ");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreatureTemplateSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatureId")
                        .HasComment("Айди шаблона существа");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Skill")
                        .HasComment("Навык");

                    b.Property<int>("SkillValue")
                        .HasColumnType("int")
                        .HasColumnName("SkillValue")
                        .HasComment("Значение навыка");

                    b.HasKey("Id");

                    b.HasIndex("CreatureTemplateId");

                    b.ToTable("CreatureTemplateSkills", "GameRules", t =>
                        {
                            t.HasComment("Навыки шаблона существа");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatureId")
                        .HasComment("Айди существа");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name")
                        .HasComment("Название эффекта");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.ToTable("Effects", "Battles", t =>
                        {
                            t.HasComment("Эффекты");
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AvatarId")
                        .HasComment("Айди аватара игры");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasColumnName("Description")
                        .HasComment("Описание игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games", "BaseGame", t =>
                        {
                            t.HasComment("Игры");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.GameRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameRoles", "System", t =>
                        {
                            t.HasComment("Роли в игре");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "MainMaster",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe117d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Master",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3148-4791-9053-9667cbe137d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Player",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.ImgFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("ImgFiles", "System", t =>
                        {
                            t.HasComment("Графические файлы");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Interface", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasComment("Название интерфейса");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Type")
                        .HasComment("Тип интерфейса");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Interfaces", "System", t =>
                        {
                            t.HasComment("Интерфейсы");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "SystemDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "SystemInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = " SystemLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "SystemInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "GameDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "GameInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d9"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "GameLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "GameInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d5"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "CharacterDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "CharacterInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d0"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "CharacterLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "CharacterInterface"
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.SystemRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasComment("Роль в системе");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SystemRoles", "System", t =>
                        {
                            t.HasComment("Роли в системе");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "AdminRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3148-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "UserRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.TextFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<int>("Size")
                        .HasColumnType("int")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("TextFiles", "System", t =>
                        {
                            t.HasComment("Текстовые файлы");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("char(36)")
                        .HasColumnName("AvatarId")
                        .HasComment("Айди аватара");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("Email")
                        .HasComment("Емэйл пользователя");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("InterfaceId")
                        .HasComment("Интерфейс пользователя");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Name")
                        .HasComment("Имя пользователя");

                    b.Property<string>("Phone")
                        .HasColumnType("longtext")
                        .HasColumnName("Phone")
                        .HasComment("Телефон пользователя");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("InterfaceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users", "System", t =>
                        {
                            t.HasComment("Пользователи");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "andmin@email.ru",
                            InterfaceId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Системный пользователь",
                            Phone = "Нет",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Login")
                        .HasComment("Логин");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("PasswordHash")
                        .HasComment("Хэш пароля");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("Id")
                        .HasComment("Айди");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts", "System", t =>
                        {
                            t.HasComment("Аккаунты пользователей");

                            t.Property("Id")
                                .HasColumnName("Id1");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("GameId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("GameRoleId")
                        .HasColumnType("char(36)")
                        .HasColumnName("GameRoleId")
                        .HasComment("Айди роли в игре");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("InterfaceId")
                        .HasComment("Айди интерфейса");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserId")
                        .HasComment("Айди пользователя");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameRoleId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGames", "BaseGame", t =>
                        {
                            t.HasComment("Игры пользователя");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserGameCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CharacterId")
                        .HasComment("Айди персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("char(36)")
                        .HasColumnName("InterfaceId")
                        .HasComment("Айди интерфейса");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserGameId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserGameId")
                        .HasComment("Айди пользователя игры");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("UserGameId");

                    b.ToTable("UserGameCharacters", "Characters", t =>
                        {
                            t.HasComment("Персонажи пользователя игры");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("longtext");

                    b.Property<Guid>("SystemRoleId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SystemRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "System", t =>
                        {
                            t.HasComment("Роли пользователей");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.BodyTemplatePart", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.BodyPart");

                    b.Property<Guid>("BodyTemplateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("BodyTemplateId")
                        .HasComment("Айди шаблона тела");

                    b.HasIndex("BodyTemplateId");

                    b.ToTable("BodyTemplateParts", "GameRules", t =>
                        {
                            t.HasComment("Части шаблона тела");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreaturePart", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.BodyPart");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatureId")
                        .HasComment("Айди существа");

                    b.Property<int>("CurrentArmor")
                        .HasColumnType("int")
                        .HasColumnName("CurrentArmor")
                        .HasComment("Текущая броня");

                    b.Property<int>("StartingArmor")
                        .HasColumnType("int")
                        .HasColumnName("StartingArmor")
                        .HasComment("Стартовая броня");

                    b.HasIndex("CreatureId");

                    b.ToTable("CreatureParts", "Battles", t =>
                        {
                            t.HasComment("Части существа");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreatureTemplatePart", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.BodyPart");

                    b.Property<int>("Armor")
                        .HasColumnType("int")
                        .HasColumnName("Armor")
                        .HasComment("Броня");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("char(36)")
                        .HasColumnName("CreatureTemplateId")
                        .HasComment("Айди шаблона существа");

                    b.HasIndex("CreatureTemplateId");

                    b.ToTable("CreatureTemplateParts", "GameRules", t =>
                        {
                            t.HasComment("Части шаблона существа");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Character", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Creature");

                    b.Property<DateTime?>("ActivationTime")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ActivationTime")
                        .HasComment("Время активации персонажа");

                    b.Property<Guid?>("UserGameActivatedId")
                        .HasColumnType("char(36)")
                        .HasColumnName("UserGameActivatedId")
                        .HasComment("Айди активировашего персонажа пользователя");

                    b.HasIndex("UserGameActivatedId")
                        .IsUnique();

                    b.ToTable("Characters", "Characters", t =>
                        {
                            t.HasComment("Персонажи");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.Property<string>("BodyPartLocation")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("BodyPartLocation")
                        .HasComment("Тип части тела");

                    b.Property<Guid?>("CreaturePartId")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("CreaturePartId")
                        .HasComment("Айди части тела");

                    b.Property<string>("Severity")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Severity")
                        .HasComment("Тяжесть критического эффекта");

                    b.HasIndex("CreaturePartId");

                    b.ToTable("CritEffects", "Battles", t =>
                        {
                            t.HasComment("Критические эффекты");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.BleedEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.ToTable("BleedEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты кровотечения");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.BleedingWoundEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.Property<int>("Damage")
                        .HasColumnType("int")
                        .HasColumnName("Damage")
                        .HasComment("Урон");

                    b.Property<int>("Severity")
                        .HasColumnType("int")
                        .HasColumnName("Severity")
                        .HasComment("Тяжесть");

                    b.ToTable("BleedingWoundEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты кровавой раны");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.ToTable("DeadEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты смерти");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DyingEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.Property<int>("Counter")
                        .HasColumnType("int")
                        .HasColumnName("Counter")
                        .HasComment("Модификатор сложности");

                    b.ToTable("DyingEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты при смерти");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.FireEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.ToTable("FireEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты горения");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.FreezeEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.ToTable("FreezeEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты заморозки");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.PoisonEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.ToTable("PoisonEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты отравления");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.StaggeredEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.ToTable("StaggeredEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты ошеломления");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.StunEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.ToTable("StunEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты дезориентации");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SufflocationEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.Effect");

                    b.ToTable("SufflocationEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты удушья");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexArmCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("ComplexArmCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты перелома руки");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexHead1CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("ComplexHead1CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты выбитых зубов");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexHead2CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("ComplexHead2CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты небольшой травмы головы");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexLegCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("ComplexLegCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты перелома ноги");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexTailCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("ComplexTailCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты перелома хвоста");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexTorso1CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("ComplexTorso1CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты сломанных ребер");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexTorso2CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("RoundCounter")
                        .HasColumnType("int")
                        .HasColumnName("RoundCounter")
                        .HasComment("Счетчик раундов");

                    b.ToTable("ComplexTorso2CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты разрыва селезенки");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexWingCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("ComplexWingCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты перелома крыла");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyArmCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("DeadlyArmCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты потери руки");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyHead1CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("DeadlyHead1CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты повреждения глаза");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyHead2CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("DeadlyHead2CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты отсечения головы");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyLegCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("AthleticsModifier")
                        .HasColumnType("int")
                        .HasColumnName("AthleticsModifier")
                        .HasComment("Модификатор атлетики");

                    b.Property<int>("DodgeModifier")
                        .HasColumnType("int")
                        .HasColumnName("DodgeModifier")
                        .HasComment("Модификатор уклонения");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.Property<int>("SpeedModifier")
                        .HasColumnType("int")
                        .HasColumnName("SpeedModifier")
                        .HasComment("Модификатор скорости");

                    b.ToTable("DeadlyLegCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты потери ноги");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyTailCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("AthleticsModifier")
                        .HasColumnType("int")
                        .HasColumnName("AthleticsModifier")
                        .HasComment("Модификатор атлетики");

                    b.Property<int>("DodgeModifier")
                        .HasColumnType("int")
                        .HasColumnName("DodgeModifier")
                        .HasComment("Модификатор уклонения");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("DeadlyTailCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты потери хвоста");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyTorso1CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("AfterTreatStaModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatStaModifier")
                        .HasComment("Модификатор стамины после стабилизации");

                    b.Property<int>("StaModifier")
                        .HasColumnType("int")
                        .HasColumnName("StaModifier")
                        .HasComment("Модификатор стамины");

                    b.ToTable("DeadlyTorso1CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты септического шока");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyTorso2CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("AfterTreatBodyModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatBodyModifier")
                        .HasComment("Модификатор телосложения после стабилизации");

                    b.Property<int>("AfterTreatSpeedModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatSpeedModifier")
                        .HasComment("Модификатор скорости после стабилизации");

                    b.Property<int>("AfterTreatStaModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatStaModifier")
                        .HasComment("Модификатор стамины после стабилизации");

                    b.Property<int>("BodyModifier")
                        .HasColumnType("int")
                        .HasColumnName("BodyModifier")
                        .HasComment("Модификатор телосложения");

                    b.Property<int>("SpeedModifier")
                        .HasColumnType("int")
                        .HasColumnName("SpeedModifier")
                        .HasComment("Модификатор скорости");

                    b.Property<int>("StaModifier")
                        .HasColumnType("int")
                        .HasColumnName("StaModifier")
                        .HasComment("Модификатор стамины");

                    b.ToTable("DeadlyTorso2CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты травмы сердца");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyWingCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("AthleticsModifier")
                        .HasColumnType("int")
                        .HasColumnName("AthleticsModifier")
                        .HasComment("Модификатор атлетики");

                    b.Property<int>("DodgeModifier")
                        .HasColumnType("int")
                        .HasColumnName("DodgeModifier")
                        .HasComment("Модификатор уклонения");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.Property<int>("SpeedModifier")
                        .HasColumnType("int")
                        .HasColumnName("SpeedModifier")
                        .HasComment("Модификатор скорости");

                    b.ToTable("DeadlyWingCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты потери крыла");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultArmCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("DifficultArmCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты открытого перелома руки");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultHead1CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("NextCheck")
                        .HasColumnType("int")
                        .HasColumnName("NextCheck")
                        .HasComment("Раунд следующей проверки");

                    b.Property<int>("RoundCounter")
                        .HasColumnType("int")
                        .HasColumnName("RoundCounter")
                        .HasComment("Счетчик раундов");

                    b.ToTable("DifficultHead1CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты контузии");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultHead2CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("DifficultHead2CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты проломленного черепа");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultLegCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("AfterTreatAthleticsModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatAthleticsModifier")
                        .HasComment("Модификатор атлетики после стабилизации");

                    b.Property<int>("AfterTreatDodgeModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatDodgeModifier")
                        .HasComment("Модификатор уклонения после стабилизации");

                    b.Property<int>("AfterTreatSpeedModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatSpeedModifier")
                        .HasComment("Модификатор скорости после стабилизации");

                    b.Property<int>("AthleticsModifier")
                        .HasColumnType("int")
                        .HasColumnName("AthleticsModifier")
                        .HasComment("Модификатор атлетики");

                    b.Property<int>("DodgeModifier")
                        .HasColumnType("int")
                        .HasColumnName("DodgeModifier")
                        .HasComment("Модификатор уклонения");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.Property<int>("SpeedModifier")
                        .HasColumnType("int")
                        .HasColumnName("SpeedModifier")
                        .HasComment("Модификатор скорости");

                    b.ToTable("DifficultLegCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты открытого перелома ноги");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultTailCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("AfterTreatAthleticsModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatAthleticsModifier")
                        .HasComment("Модификатор атлетики после стабилизации");

                    b.Property<int>("AfterTreatDodgeModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatDodgeModifier")
                        .HasComment("Модификатор уклонения после стабилизации");

                    b.Property<int>("AthleticsModifier")
                        .HasColumnType("int")
                        .HasColumnName("AthleticsModifier")
                        .HasComment("Модификатор атлетики");

                    b.Property<int>("DodgeModifier")
                        .HasColumnType("int")
                        .HasColumnName("DodgeModifier")
                        .HasComment("Модификатор уклонения");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("DifficultTailCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты открытого перелома хвоста");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultTorso1CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("DifficultTorso1CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты сосущей раны грудной клетки");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultTorso2CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("DifficultTorso2CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты раны в живот");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultWingCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<int>("AfterTreatAthleticsModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatAthleticsModifier")
                        .HasComment("Модификатор атлетики после стабилизации");

                    b.Property<int>("AfterTreatDodgeModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatDodgeModifier")
                        .HasComment("Модификатор уклонения после стабилизации");

                    b.Property<int>("AfterTreatSpeedModifier")
                        .HasColumnType("int")
                        .HasColumnName("AfterTreatSpeedModifier")
                        .HasComment("Модификатор скорости после стабилизации");

                    b.Property<int>("AthleticsModifier")
                        .HasColumnType("int")
                        .HasColumnName("AthleticsModifier")
                        .HasComment("Модификатор атлетики");

                    b.Property<int>("DodgeModifier")
                        .HasColumnType("int")
                        .HasColumnName("DodgeModifier")
                        .HasComment("Модификатор уклонения");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.Property<int>("SpeedModifier")
                        .HasColumnType("int")
                        .HasColumnName("SpeedModifier")
                        .HasComment("Модификатор скорости");

                    b.ToTable("DifficultWingCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты открытого перелома крыла");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleArmCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("SimpleArmCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты вывиха руки");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleHead1CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("SimpleHead1CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты уродующего шрама");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleHead2CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("SimpleHead2CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты треснувшей челюсти");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleLegCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("SimpleLegCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты вывиха ноги");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleTailCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("SimpleTailCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты вывиха крыла");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleTorso1CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("SimpleTorso1CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты инородного объекта");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleTorso2CritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.ToTable("SimpleTorso2CritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты треснувших ребер");
                        });
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleWingCritEffect", b =>
                {
                    b.HasBaseType("Witcher.Core.Entities.CritEffect");

                    b.Property<bool>("PenaltyApplied")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("PenaltyApplied")
                        .HasComment("Пенальти применено");

                    b.ToTable("SimpleWingCritEffects", "Effects", t =>
                        {
                            t.HasComment("Эффекты вывиха крыла");
                        });
                });

            modelBuilder.Entity("AbilityCreature", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AbilityCreatureTemplate", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.CreatureTemplate", null)
                        .WithMany()
                        .HasForeignKey("CreatureTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameImgFile", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.ImgFile", null)
                        .WithMany()
                        .HasForeignKey("ImgFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameTextFile", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.TextFile", null)
                        .WithMany()
                        .HasForeignKey("TextFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImgFileUser", b =>
                {
                    b.HasOne("Witcher.Core.Entities.ImgFile", null)
                        .WithMany()
                        .HasForeignKey("ImgFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TextFileUser", b =>
                {
                    b.HasOne("Witcher.Core.Entities.TextFile", null)
                        .WithMany()
                        .HasForeignKey("TextFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Ability", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Game", "Game")
                        .WithMany("Abilities")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Witcher.Core.Entities.DefensiveSkill", "DefensiveSkills", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("AbilityId")
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("CreatedByUserId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime(6)");

                            b1.Property<Guid>("ModifiedByUserId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("ModifiedOn")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("RoleCreatedUser")
                                .HasColumnType("longtext");

                            b1.Property<string>("RoleModifiedUser")
                                .HasColumnType("longtext");

                            b1.Property<int>("Skill")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("AbilityId");

                            b1.ToTable("DefensiveSkill", "GameRules");

                            b1.WithOwner()
                                .HasForeignKey("AbilityId");
                        });

                    b.Navigation("DefensiveSkills");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Witcher.Core.Entities.AppliedCondition", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Ability", "Ability")
                        .WithMany("AppliedConditions")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Battle", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Game", "Game")
                        .WithMany("Battles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Battle")
                        .HasForeignKey("Witcher.Core.Entities.Battle", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Witcher.Core.Entities.UserGame", "UserGameActivated")
                        .WithMany("Instances")
                        .HasForeignKey("UserGameActivatedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("ImgFile");

                    b.Navigation("UserGameActivated");
                });

            modelBuilder.Entity("Witcher.Core.Entities.BodyTemplate", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Game", "Game")
                        .WithMany("BodyTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Creature", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Battle", "Battle")
                        .WithMany("Creatures")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.CreatureTemplate", "CreatureTemplate")
                        .WithMany("Creatures")
                        .HasForeignKey("CreatureTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Creature")
                        .HasForeignKey("Witcher.Core.Entities.Creature", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsMany("Witcher.Core.Entities.CreatureDamageTypeModifier", "DamageTypeModifiers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("CreatedByUserId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime(6)");

                            b1.Property<Guid>("CreatureId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("DamageType")
                                .HasColumnType("int");

                            b1.Property<int>("DamageTypeModifier")
                                .HasColumnType("int");

                            b1.Property<Guid>("ModifiedByUserId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("ModifiedOn")
                                .HasColumnType("datetime(6)");

                            b1.Property<Guid>("PrimaryEntityid")
                                .HasColumnType("char(36)");

                            b1.Property<string>("RoleCreatedUser")
                                .HasColumnType("longtext");

                            b1.Property<string>("RoleModifiedUser")
                                .HasColumnType("longtext");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatureId");

                            b1.ToTable("CreatureDamageTypeModifier", "Battles");

                            b1.WithOwner()
                                .HasForeignKey("CreatureId");
                        });

                    b.Navigation("Battle");

                    b.Navigation("CreatureTemplate");

                    b.Navigation("DamageTypeModifiers");

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreatureSkill", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Creature", "Creature")
                        .WithMany("CreatureSkills")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreatureTemplate", b =>
                {
                    b.HasOne("Witcher.Core.Entities.BodyTemplate", "BodyTemplate")
                        .WithMany("CreatureTemplates")
                        .HasForeignKey("BodyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.Game", "Game")
                        .WithMany("CreatureTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("CreatureTemplate")
                        .HasForeignKey("Witcher.Core.Entities.CreatureTemplate", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsMany("Witcher.Core.Entities.CreatureTemplateDamageTypeModifier", "DamageTypeModifiers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("char(36)");

                            b1.Property<Guid>("CreatedByUserId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("CreatedOn")
                                .HasColumnType("datetime(6)");

                            b1.Property<Guid>("CreatureTemplateId")
                                .HasColumnType("char(36)");

                            b1.Property<int>("DamageType")
                                .HasColumnType("int");

                            b1.Property<int>("DamageTypeModifier")
                                .HasColumnType("int");

                            b1.Property<Guid>("ModifiedByUserId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("ModifiedOn")
                                .HasColumnType("datetime(6)");

                            b1.Property<Guid>("PrimaryEntityid")
                                .HasColumnType("char(36)");

                            b1.Property<string>("RoleCreatedUser")
                                .HasColumnType("longtext");

                            b1.Property<string>("RoleModifiedUser")
                                .HasColumnType("longtext");

                            b1.HasKey("Id");

                            b1.HasIndex("CreatureTemplateId");

                            b1.ToTable("CreatureTemplateDamageTypeModifier", "GameRules");

                            b1.WithOwner()
                                .HasForeignKey("CreatureTemplateId");
                        });

                    b.Navigation("BodyTemplate");

                    b.Navigation("DamageTypeModifiers");

                    b.Navigation("Game");

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreatureTemplateSkill", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CreatureTemplate", "CreatureTemplate")
                        .WithMany("CreatureTemplateSkills")
                        .HasForeignKey("CreatureTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatureTemplate");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Creature", "Creature")
                        .WithMany("Effects")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Game", b =>
                {
                    b.HasOne("Witcher.Core.Entities.ImgFile", "Avatar")
                        .WithOne("Game")
                        .HasForeignKey("Witcher.Core.Entities.Game", "AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("Witcher.Core.Entities.User", b =>
                {
                    b.HasOne("Witcher.Core.Entities.ImgFile", "Avatar")
                        .WithOne("UserAvatar")
                        .HasForeignKey("Witcher.Core.Entities.User", "AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Witcher.Core.Entities.Interface", "Interface")
                        .WithMany("Users")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Interface");
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserAccount", b =>
                {
                    b.HasOne("Witcher.Core.Entities.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserGame", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.GameRole", "GameRole")
                        .WithMany("UserGames")
                        .HasForeignKey("GameRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.Interface", "Interface")
                        .WithMany("UserGames")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameRole");

                    b.Navigation("Interface");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserGameCharacter", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Character", "Character")
                        .WithMany("UserGameCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.Interface", "Interface")
                        .WithMany("UserGameCharacters")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.UserGame", "UserGame")
                        .WithMany("UserGameCharacters")
                        .HasForeignKey("UserGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Interface");

                    b.Navigation("UserGame");
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Witcher.Core.Entities.SystemRole", "SystemRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("SystemRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Witcher.Core.Entities.BodyTemplatePart", b =>
                {
                    b.HasOne("Witcher.Core.Entities.BodyTemplate", "BodyTemplate")
                        .WithMany("BodyTemplateParts")
                        .HasForeignKey("BodyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.BodyPart", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.BodyTemplatePart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyTemplate");
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreaturePart", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Creature", "Creature")
                        .WithMany("CreatureParts")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.BodyPart", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.CreaturePart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreatureTemplatePart", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CreatureTemplate", "CreatureTemplate")
                        .WithMany("CreatureTemplateParts")
                        .HasForeignKey("CreatureTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.BodyPart", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.CreatureTemplatePart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatureTemplate");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Character", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Creature", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Character", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.UserGameCharacter", "UserGameActivated")
                        .WithOne("ActivateCharacter")
                        .HasForeignKey("Witcher.Core.Entities.Character", "UserGameActivatedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UserGameActivated");
                });

            modelBuilder.Entity("Witcher.Core.Entities.CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CreaturePart", "CreaturePart")
                        .WithMany()
                        .HasForeignKey("CreaturePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreaturePart");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.BleedEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.BleedEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.BleedingWoundEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.BleedingWoundEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DeadEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DyingEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DyingEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.FireEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.FireEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.FreezeEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.FreezeEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.PoisonEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.PoisonEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.StaggeredEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.StaggeredEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.StunEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.StunEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SufflocationEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.Effect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.SufflocationEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexArmCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.ComplexArmCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexHead1CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.ComplexHead1CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexHead2CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.ComplexHead2CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexLegCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.ComplexLegCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexTailCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.ComplexTailCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexTorso1CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.ComplexTorso1CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexTorso2CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.ComplexTorso2CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.ComplexWingCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.ComplexWingCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyArmCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DeadlyArmCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyHead1CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DeadlyHead1CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyHead2CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DeadlyHead2CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyLegCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DeadlyLegCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyTailCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DeadlyTailCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyTorso1CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DeadlyTorso1CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyTorso2CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DeadlyTorso2CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DeadlyWingCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DeadlyWingCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultArmCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DifficultArmCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultHead1CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DifficultHead1CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultHead2CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DifficultHead2CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultLegCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DifficultLegCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultTailCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DifficultTailCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultTorso1CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DifficultTorso1CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultTorso2CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DifficultTorso2CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.DifficultWingCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.DifficultWingCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleArmCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.SimpleArmCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleHead1CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.SimpleHead1CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleHead2CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.SimpleHead2CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleLegCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.SimpleLegCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleTailCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.SimpleTailCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleTorso1CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.SimpleTorso1CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleTorso2CritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.SimpleTorso2CritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Effects.SimpleWingCritEffect", b =>
                {
                    b.HasOne("Witcher.Core.Entities.CritEffect", null)
                        .WithOne()
                        .HasForeignKey("Witcher.Core.Entities.Effects.SimpleWingCritEffect", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Witcher.Core.Entities.Ability", b =>
                {
                    b.Navigation("AppliedConditions");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Battle", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Witcher.Core.Entities.BodyTemplate", b =>
                {
                    b.Navigation("BodyTemplateParts");

                    b.Navigation("CreatureTemplates");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Creature", b =>
                {
                    b.Navigation("CreatureParts");

                    b.Navigation("CreatureSkills");

                    b.Navigation("Effects");
                });

            modelBuilder.Entity("Witcher.Core.Entities.CreatureTemplate", b =>
                {
                    b.Navigation("CreatureTemplateParts");

                    b.Navigation("CreatureTemplateSkills");

                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Game", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Battles");

                    b.Navigation("BodyTemplates");

                    b.Navigation("CreatureTemplates");

                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Witcher.Core.Entities.GameRole", b =>
                {
                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Witcher.Core.Entities.ImgFile", b =>
                {
                    b.Navigation("Battle");

                    b.Navigation("Creature");

                    b.Navigation("CreatureTemplate");

                    b.Navigation("Game");

                    b.Navigation("UserAvatar");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Interface", b =>
                {
                    b.Navigation("UserGameCharacters");

                    b.Navigation("UserGames");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Witcher.Core.Entities.SystemRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Witcher.Core.Entities.User", b =>
                {
                    b.Navigation("UserAccounts");

                    b.Navigation("UserGames");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserGame", b =>
                {
                    b.Navigation("Instances");

                    b.Navigation("UserGameCharacters");
                });

            modelBuilder.Entity("Witcher.Core.Entities.UserGameCharacter", b =>
                {
                    b.Navigation("ActivateCharacter");
                });

            modelBuilder.Entity("Witcher.Core.Entities.Character", b =>
                {
                    b.Navigation("UserGameCharacters");
                });
#pragma warning restore 612, 618
        }
    }
}
