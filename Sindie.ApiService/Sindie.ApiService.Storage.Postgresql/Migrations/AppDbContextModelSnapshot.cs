// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sindie.ApiService.Storage.Postgresql;

#nullable disable

namespace Sindie.ApiService.Storage.Postgresql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AbilityCreature", b =>
                {
                    b.Property<Guid>("AbilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("uuid");

                    b.HasKey("AbilitiesId", "CreaturesId");

                    b.HasIndex("CreaturesId");

                    b.ToTable("CreatureAbilities", "GameInstance");
                });

            modelBuilder.Entity("ConditionCreature", b =>
                {
                    b.Property<Guid>("ConditionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("uuid");

                    b.HasKey("ConditionsId", "CreaturesId");

                    b.HasIndex("CreaturesId");

                    b.ToTable("CurrentConditions", "GameInstance");
                });

            modelBuilder.Entity("GameImgFile", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImgFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("GamesId", "ImgFilesId");

                    b.HasIndex("ImgFilesId");

                    b.ToTable("GameImgFile");
                });

            modelBuilder.Entity("GameTextFile", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TextFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("GamesId", "TextFilesId");

                    b.HasIndex("TextFilesId");

                    b.ToTable("GameTextFile");
                });

            modelBuilder.Entity("ImgFileUser", b =>
                {
                    b.Property<Guid>("ImgFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ImgFilesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ImgFileUser", "System");
                });

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.Property<Guid>("NotificationsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReceiversId")
                        .HasColumnType("uuid");

                    b.HasKey("NotificationsId", "ReceiversId");

                    b.HasIndex("ReceiversId");

                    b.ToTable("UserNotications", "Notifications");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Ability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("Accuracy")
                        .HasColumnType("integer")
                        .HasColumnName("Accuracy")
                        .HasComment("Точность атаки");

                    b.Property<int>("AttackDiceQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("AttackDiceQuantity")
                        .HasComment("Количество кубов атаки");

                    b.Property<Guid>("AttackParameterId")
                        .HasColumnType("uuid");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("AttackSpeed")
                        .HasComment("Скорость атаки");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureTemplateId")
                        .HasComment("Айди шаблона существа");

                    b.Property<int>("DamageModifier")
                        .HasColumnType("integer")
                        .HasColumnName("DamageModifier")
                        .HasComment("Модификатор атаки");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание способности");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название способности");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttackParameterId");

                    b.HasIndex("CreatureTemplateId");

                    b.ToTable("Abilities", "GameRules");

                    b.HasComment("Способности");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание действия");

                    b.Property<Guid>("InteractionId")
                        .HasColumnType("uuid")
                        .HasColumnName("InteractionId")
                        .HasComment("Айди взаимодействия для деятельности");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название действия");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("ScenarioActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioActionId")
                        .HasComment("Айди сценария действия во взаимодействии");

                    b.HasKey("Id");

                    b.HasIndex("InteractionId");

                    b.HasIndex("ScenarioActionId")
                        .IsUnique();

                    b.ToTable("Actions", "InteractionRules");

                    b.HasComment("Действия");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ActiveCycle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime>("ActivationBeginning")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActivationBeginning")
                        .HasComment("Начало цикла активности");

                    b.Property<DateTime>("ActivationEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActivationEnd")
                        .HasComment("Конец цикла активности");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifierScriptId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifierScriptId")
                        .HasComment("Айди скрипта модификатора");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModifierScriptId");

                    b.ToTable("ActiveCycles", "GameRules");

                    b.HasComment("Скрипты модифкатора");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("ApplicationAreaId")
                        .HasColumnType("uuid")
                        .HasColumnName("ApplicationAreaId")
                        .HasComment("Айди области применения для деятельности");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание деятельности");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла для деятельности");

                    b.Property<Guid>("InteractionId")
                        .HasColumnType("uuid")
                        .HasColumnName("InteractionId")
                        .HasComment("Айди взаимодействия для деятельности");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название деятельности");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationAreaId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("InteractionId");

                    b.ToTable("Activities", "InteractionRules");

                    b.HasComment("Деятельности");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ActivityAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("ActionId")
                        .HasComment("Айди действия");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("ActivityId")
                        .HasComment("Айди деятельности");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order")
                        .HasComment("Порядок действий");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivityActions", "InteractionRules");

                    b.HasComment("Действия деятельности");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ApplicationArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание описание области применения");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название области применения");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationAreas", "InteractionRules");

                    b.HasComment("Области применения");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.AppliedCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("AbilityId")
                        .HasColumnType("uuid")
                        .HasColumnName("AbilityId")
                        .HasComment("Айди способнности");

                    b.Property<double>("ApplyChance")
                        .HasColumnType("double precision")
                        .HasColumnName("ApplyChance")
                        .HasComment("Шанс применения");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("ConditionId")
                        .HasComment("Айди состояния");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("ConditionId");

                    b.ToTable("AppliedConditions", "GameRules");

                    b.HasComment("Применяемые состояния");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text")
                        .HasComment("Текст");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Articles", "System");

                    b.HasComment("Статьи");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Bag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid?>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterId")
                        .HasComment("Айди персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание сумки");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("InstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InstanceId")
                        .HasComment("Айди экземпляра игры");

                    b.Property<int?>("MaxBagSize")
                        .HasColumnType("integer")
                        .HasColumnName("MaxBagSize")
                        .HasComment("Максимальный размер сумки");

                    b.Property<double?>("MaxWeight")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название сумки");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .IsUnique();

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("InstanceId");

                    b.ToTable("Bags", "GameInstance");

                    b.HasComment("Сумки");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BagItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("BagId")
                        .HasColumnType("uuid")
                        .HasColumnName("BagId")
                        .HasComment("Айди сумки");

                    b.Property<int>("Blocked")
                        .HasColumnType("integer")
                        .HasColumnName("Blocked")
                        .HasComment("Заблокировано");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("ItemId")
                        .HasComment("Айди предмета");

                    b.Property<int>("MaxQuantityItem")
                        .HasColumnType("integer")
                        .HasColumnName("MaxQuantityItem")
                        .HasComment("Максимальное количество в стаке");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuantityItem")
                        .HasColumnType("integer")
                        .HasColumnName("QuantityItem")
                        .HasComment("Количество предметов в стеке");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Stack")
                        .HasColumnType("integer")
                        .HasColumnName("Stack")
                        .HasComment("Стек");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("Weight")
                        .HasComment("Вес");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.HasIndex("ItemId");

                    b.ToTable("BagItems", "GameInstance");

                    b.HasComment("Предметы в сумке");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Body", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterId")
                        .HasComment("Айди персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid?>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("ItemId")
                        .HasComment("Айди предмета");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid")
                        .HasColumnName("SlotId")
                        .HasComment("Айди слота");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.HasIndex("SlotId");

                    b.ToTable("Bodies", "GameInstance");

                    b.HasComment("Тела");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название шаблона тела");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("BodyTemplates", "GameRules");

                    b.HasComment("Шаблоны тел");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime?>("ActivationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActivationTime")
                        .HasComment("Время активации персонажа");

                    b.Property<Guid?>("BagId")
                        .HasColumnType("uuid")
                        .HasColumnName("BagId")
                        .HasComment("Айди сумки");

                    b.Property<Guid?>("CharacterTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterTemplateId")
                        .HasComment("Айди шаблона персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание персонажа");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("InstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InstanceId")
                        .HasComment("Айди экземпляра игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Имя персонажа");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid?>("TextFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("TextFileId")
                        .HasComment("Айди текстового файла");

                    b.Property<Guid?>("UserGameActivatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGameActivatedId")
                        .HasComment("Айди активировашего персонажа пользователя");

                    b.HasKey("Id");

                    b.HasIndex("BagId")
                        .IsUnique();

                    b.HasIndex("CharacterTemplateId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("InstanceId");

                    b.HasIndex("TextFileId")
                        .IsUnique();

                    b.HasIndex("UserGameActivatedId")
                        .IsUnique();

                    b.ToTable("Characters", "GameInstance");

                    b.HasComment("Персонажи");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterId")
                        .HasComment("Айди персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifierId")
                        .HasComment("Айди модификатора");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ModifierId");

                    b.ToTable("CharacterModifiers", "GameInstance");

                    b.HasComment("Модификаторы персонажа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterId")
                        .HasComment("Айди персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid")
                        .HasColumnName("ParameterId")
                        .HasComment("Айди параметра");

                    b.Property<double>("ParameterValue")
                        .HasColumnType("double precision")
                        .HasColumnName("ParametrValue")
                        .HasComment("Значение параметра");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ParameterId");

                    b.ToTable("CharacterParameters", "GameInstance");

                    b.HasComment("Параметры персонажа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание шаблона");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid?>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Айди интерфейса");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название шаблона");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("InterfaceId");

                    b.ToTable("CharacterTemplates", "GameRules");

                    b.HasComment("Шаблоны персонажей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplateModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterTemplateId")
                        .HasComment("Айди шаблона персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifierId")
                        .HasComment("Айди модификатора");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterTemplateId");

                    b.HasIndex("ModifierId");

                    b.ToTable("CharacterTemplateModifiers", "GameRules");

                    b.HasComment("Модификаторы шаблонов персонажей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplateSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterTemplateId")
                        .HasComment("Айди шаблона персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid")
                        .HasColumnName("SlotId")
                        .HasComment("Айди слота");

                    b.HasKey("Id");

                    b.HasIndex("CharacterTemplateId");

                    b.HasIndex("SlotId");

                    b.ToTable("CharacterTemplateSlots", "GameRules");

                    b.HasComment("Слоты шаблона персонажа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название состояния");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Conditions", "GameRules");

                    b.HasComment("Состояния");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("Body")
                        .HasColumnType("integer")
                        .HasColumnName("Body")
                        .HasComment("Телосложение");

                    b.Property<Guid>("BodyTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("BodyTemplateId")
                        .HasComment("Айди шаблона тела");

                    b.Property<int>("Cra")
                        .HasColumnType("integer")
                        .HasColumnName("Cra")
                        .HasComment("Крафт");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureTemplateId")
                        .HasComment("Айди шаблона существа");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание шаблона");

                    b.Property<int>("Dex")
                        .HasColumnType("integer")
                        .HasColumnName("Dex")
                        .HasComment("Ловкость");

                    b.Property<int>("Emp")
                        .HasColumnType("integer")
                        .HasColumnName("Emp")
                        .HasComment("Эмпатия");

                    b.Property<int>("HP")
                        .HasColumnType("integer")
                        .HasColumnName("HP")
                        .HasComment("Хиты");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("InstanceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InstanceId")
                        .HasComment("Айди экземпляра");

                    b.Property<int>("Int")
                        .HasColumnType("integer")
                        .HasColumnName("Int")
                        .HasComment("Интеллект");

                    b.Property<int>("Luck")
                        .HasColumnType("integer")
                        .HasColumnName("Luck")
                        .HasComment("Удача");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название существа");

                    b.Property<int>("Ref")
                        .HasColumnType("integer")
                        .HasColumnName("Ref")
                        .HasComment("Рефлексы");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Speed")
                        .HasColumnType("integer")
                        .HasColumnName("Speed")
                        .HasComment("Скорость");

                    b.Property<int>("Sta")
                        .HasColumnType("integer")
                        .HasColumnName("Sta")
                        .HasComment("Стамина");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип шаблона существа");

                    b.Property<int>("Will")
                        .HasColumnType("integer")
                        .HasColumnName("Will")
                        .HasComment("Воля");

                    b.HasKey("Id");

                    b.HasIndex("BodyTemplateId");

                    b.HasIndex("CreatureTemplateId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("InstanceId");

                    b.ToTable("Creatures", "GameInstance");

                    b.HasComment("Существа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureId")
                        .HasComment("Айди существа");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid")
                        .HasColumnName("ParameterId")
                        .HasComment("Айди параметра");

                    b.Property<double>("ParameterValue")
                        .HasColumnType("double precision")
                        .HasColumnName("ParametrValue")
                        .HasComment("Значение параметра");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("ParameterId");

                    b.ToTable("CreatureParameters", "GameInstance");

                    b.HasComment("Параметры существа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("Body")
                        .HasColumnType("integer")
                        .HasColumnName("Body")
                        .HasComment("Телосложение");

                    b.Property<Guid>("BodyTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("BodyTemplateId")
                        .HasComment("Айди шаблона тела");

                    b.Property<int>("Cra")
                        .HasColumnType("integer")
                        .HasColumnName("Cra")
                        .HasComment("Крафт");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание шаблона");

                    b.Property<int>("Dex")
                        .HasColumnType("integer")
                        .HasColumnName("Dex")
                        .HasComment("Ловкость");

                    b.Property<int>("Emp")
                        .HasColumnType("integer")
                        .HasColumnName("Emp")
                        .HasComment("Эмпатия");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<int>("HP")
                        .HasColumnType("integer")
                        .HasColumnName("HP")
                        .HasComment("Хиты");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<int>("Int")
                        .HasColumnType("integer")
                        .HasColumnName("Int")
                        .HasComment("Интеллект");

                    b.Property<int>("Luck")
                        .HasColumnType("integer")
                        .HasColumnName("Luck")
                        .HasComment("Удача");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название шаблона");

                    b.Property<int>("Ref")
                        .HasColumnType("integer")
                        .HasColumnName("Ref")
                        .HasComment("Рефлексы");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Speed")
                        .HasColumnType("integer")
                        .HasColumnName("Speed")
                        .HasComment("Скорость");

                    b.Property<int>("Sta")
                        .HasColumnType("integer")
                        .HasColumnName("Sta")
                        .HasComment("Стамина");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип шаблона существа");

                    b.Property<int>("Will")
                        .HasColumnType("integer")
                        .HasColumnName("Will")
                        .HasComment("Воля");

                    b.HasKey("Id");

                    b.HasIndex("BodyTemplateId");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.ToTable("CreatureTemplates", "GameRules");

                    b.HasComment("Шаблоны существ");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplateParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureId")
                        .HasComment("Айди шаблона существа");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid")
                        .HasColumnName("ParameterId")
                        .HasComment("Айди параметра");

                    b.Property<double>("ParameterValue")
                        .HasColumnType("double precision")
                        .HasColumnName("ParametrValue")
                        .HasComment("Значение параметра");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatureTemplateId");

                    b.HasIndex("ParameterId");

                    b.ToTable("CreatureTemplateParameters", "GameInstance");

                    b.HasComment("Параметры шаблона существа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid")
                        .HasColumnName("AvatarId")
                        .HasComment("Айди аватара игры");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games", "BaseGame");

                    b.HasComment("Игры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameRoles", "System");

                    b.HasComment("Роли в игре");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MainMaster",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe117d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Master",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3148-4791-9053-9667cbe137d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ImgFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("ImgFiles", "System");

                    b.HasComment("Графические файлы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Instance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime?>("ActivationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActivationTime")
                        .HasComment("Время активации экземпляра");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<DateTime?>("DateOfGame")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateOfGame")
                        .HasComment("Дата проведения игры");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание экземпляра");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название экземпляра");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("StoryAboutRules")
                        .HasColumnType("text")
                        .HasColumnName("StoryAboutRules")
                        .HasComment("Описание правил игры");

                    b.Property<Guid?>("UserGameActivatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGameActivatedId")
                        .HasComment("Айди активировавшего игру пользователя");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("UserGameActivatedId");

                    b.ToTable("Instances", "GameInstance");

                    b.HasComment("Экземпляры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<bool>("CanGiveUp")
                        .HasColumnType("boolean")
                        .HasColumnName("CanGiveUp")
                        .HasComment("Можно ли выйти из взаимодействия");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание описание взаимодействия");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название взаимодействия");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("RoundLimit")
                        .HasColumnType("integer")
                        .HasColumnName("RoundLimit")
                        .HasComment("Максимальное количество раундов взаимодействия");

                    b.Property<Guid?>("ScenarioLootId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioLootId")
                        .HasComment("Айди сценария лута во взаимодействии");

                    b.Property<Guid?>("ScenarioReturnId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioReturnId")
                        .HasComment("Айди сценария завершения взаимодействия");

                    b.Property<Guid?>("ScenarioVictoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioVictoryId")
                        .HasComment("Айди сценария победы во взаимодействии");

                    b.Property<Guid?>("TextFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("TextFileId")
                        .HasComment("Айди текстового файла");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScenarioLootId");

                    b.HasIndex("ScenarioReturnId");

                    b.HasIndex("ScenarioVictoryId");

                    b.HasIndex("TextFileId")
                        .IsUnique();

                    b.ToTable("Interactions", "InteractionRules");

                    b.HasComment("Взаимодействия");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.InteractionItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("ActivityId")
                        .HasComment("Айди деятельности во взаимодействии");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("ExpendQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("ExpendQuantity")
                        .HasComment("Максимальное количество применений");

                    b.Property<Guid>("InteractionsRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("InteractionsRoleId")
                        .HasComment("Айди роли взаимодействия");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("ItemId")
                        .HasComment("Айди предмета во взаимодействии");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("InteractionsRoleId");

                    b.HasIndex("ItemId");

                    b.ToTable("InteractionItems", "InteractionRules");

                    b.HasComment("Предметы во взаимодействии");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.InteractionsRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание роли");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла для роли");

                    b.Property<Guid>("InteractionId")
                        .HasColumnType("uuid")
                        .HasColumnName("InteractionId")
                        .HasComment("Айди взаимодействия для роли");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название роли");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("ScenarioCharacteristicsId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioCharacteristicsId")
                        .HasComment("Сценарий характеристик роли");

                    b.Property<Guid>("ScenarioInitiativeId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioInitiativeId")
                        .HasComment("Сценарий инициативы роли");

                    b.Property<Guid>("ScenarioLootId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioLootId")
                        .HasComment("Айди сценария лута во взаимодействии для роли");

                    b.Property<Guid>("ScenarioPrerequisitesId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioPrerequisites")
                        .HasComment("Сценарий пререквизитов к роли");

                    b.Property<Guid?>("ScenarioReturnId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioReturnId")
                        .HasComment("Айди сценария завершения взаимодействия для роли");

                    b.Property<Guid>("ScenarioVictoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioVictoryId")
                        .HasComment("Айди сценария победы во взаимодействии для роли");

                    b.Property<Guid?>("TextFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("TextFileId")
                        .HasComment("Айди текстового файла для роли");

                    b.HasKey("Id");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("InteractionId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ScenarioCharacteristicsId");

                    b.HasIndex("ScenarioInitiativeId");

                    b.HasIndex("ScenarioLootId");

                    b.HasIndex("ScenarioPrerequisitesId");

                    b.HasIndex("ScenarioReturnId");

                    b.HasIndex("ScenarioVictoryId");

                    b.HasIndex("TextFileId")
                        .IsUnique();

                    b.ToTable("InteractionsRoles", "InteractionRules");

                    b.HasComment("Роли во взаимодействии");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.InteractionsRoleActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("ActivityId")
                        .HasComment("Айди деятельности");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("InteractionsRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("InteractionsRoleId")
                        .HasComment("Айди роли взаимодействия");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("Order")
                        .HasComment("Порядок деятельности");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("InteractionsRoleId");

                    b.ToTable("InteractionsRoleActivities", "InteractionRules");

                    b.HasComment("Деятельности роли взаимодействия");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interface", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название интерфейса");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип интерфейса");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Interfaces", "System");

                    b.HasComment("Интерфейсы");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SystemDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "SystemInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = " SystemLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "SystemInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GameDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "GameInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d9"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GameLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "GameInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d5"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CharacterDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "CharacterInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d0"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CharacterLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "CharacterInterface"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("MaxQuantity")
                        .HasComment("Максимальное количество в стаке");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("Weight")
                        .HasComment("Вес");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.ToTable("ItemTemplates", "GameRules");

                    b.HasComment("Шаблоны предметов");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplateModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ItemTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("ItemTemplateId")
                        .HasComment("Айди шаблона предмета");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifierId")
                        .HasComment("Айди модификатора");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemTemplateId");

                    b.HasIndex("ModifierId");

                    b.ToTable("ItemTemplateModifiers", "GameRules");

                    b.HasComment("Модификаторы шаблонов предметов");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ModifierScript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("EventId")
                        .HasComment("Айди события");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifierId")
                        .HasComment("Айди модификатора");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScriptId")
                        .HasComment("Айди скрипта");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ModifierScripts", "GameRules");

                    b.HasComment("Скрипты модифкатора");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("Duration")
                        .HasComment("Длительность существования в минутах");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Message")
                        .HasComment("Сообщение");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications", "Notifications");

                    b.HasComment("Уведомления");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание параметра");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название параметра");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Parameters", "GameRules");

                    b.HasComment("Параметры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Party", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание стороны");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла для стороны");

                    b.Property<Guid>("InteractionId")
                        .HasColumnType("uuid")
                        .HasColumnName("InteractionId")
                        .HasComment("Айди взаимодействия для стороны");

                    b.Property<int>("MaxQuantityCharacters")
                        .HasColumnType("integer")
                        .HasColumnName("MaxQuantityCharacters")
                        .HasComment("Максимальное количество персонажей");

                    b.Property<int>("MinQuantityCharacters")
                        .HasColumnType("integer")
                        .HasColumnName("MinQuantityCharacters")
                        .HasComment("Минимальное количество персонажей");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название стороны");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid?>("ScenarioLootId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioLootId")
                        .HasComment("Айди сценария лута во взаимодействии для стороны");

                    b.Property<Guid?>("ScenarioReturnId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioReturnId")
                        .HasComment("Айди сценария завершения взаимодействия для стороны");

                    b.Property<Guid?>("ScenarioVictoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScenarioVictoryId")
                        .HasComment("Айди сценария победы во взаимодействии для стороны");

                    b.Property<Guid?>("TextFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("TextFileId")
                        .HasComment("Айди текстового файла для стороны");

                    b.HasKey("Id");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("InteractionId");

                    b.HasIndex("ScenarioLootId");

                    b.HasIndex("ScenarioReturnId");

                    b.HasIndex("ScenarioVictoryId");

                    b.HasIndex("TextFileId")
                        .IsUnique();

                    b.ToTable("Parties", "InteractionRules");

                    b.HasComment("Стороны");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.PartyInteractionsRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("InteractionsRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("InteractionsRoleId")
                        .HasComment("Айди роли взаимодействия");

                    b.Property<int?>("MaxQuantityCharacters")
                        .HasColumnType("integer")
                        .HasColumnName("MaxQuantityCharacters")
                        .HasComment("Максимальное количество персонажей");

                    b.Property<int?>("MinQuantityCharacters")
                        .HasColumnType("integer")
                        .HasColumnName("MinQuantityCharacters")
                        .HasComment("Минимальное количество персонажей");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PartyId")
                        .HasColumnType("uuid")
                        .HasColumnName("PartyId")
                        .HasComment("Айди стороны");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InteractionsRoleId");

                    b.HasIndex("PartyId");

                    b.ToTable("PartyInteractionsRoles", "InteractionRules");

                    b.HasComment("Роли стороны");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Prerequisite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла пререквизита");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.ToTable("Prerequisites", "GameRules");

                    b.HasComment("Пререквизиты");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Script", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("BodyScript")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BodyScript")
                        .HasComment("Тело скрипта");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("IsValid")
                        .HasComment("Валидность скрипта");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("ValidationText")
                        .HasColumnType("text")
                        .HasColumnName("ValidationText")
                        .HasComment("Валидационный текст");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Scripts", "GameRules");

                    b.HasComment("Скрипты");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ScriptPrerequisites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("IsValid")
                        .HasComment("Валидность скрипта");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("PrerequisiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("PrerequisiteId")
                        .HasComment("Айди пререквизита");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScriptId")
                        .HasComment("Айди скрипта");

                    b.Property<string>("ValidationText")
                        .HasColumnType("text")
                        .HasColumnName("ValidationText")
                        .HasComment("Валидационный текст");

                    b.HasKey("Id");

                    b.HasIndex("PrerequisiteId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptPrerequisites", "GameRules");

                    b.HasComment("Пререквизиты скрипта");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.SystemRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Роль в системе");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SystemRoles", "System");

                    b.HasComment("Роли в системе");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AndminRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3148-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.TextFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("TextFiles", "System");

                    b.HasComment("Текстовые файлы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid")
                        .HasColumnName("AvatarId")
                        .HasComment("Айди аватара");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email")
                        .HasComment("Емэйл пользователя");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Интерфейс пользователя");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Имя пользователя");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Phone")
                        .HasComment("Телефон пользователя");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("InterfaceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users", "System");

                    b.HasComment("Пользователи");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "andmin@email.ru",
                            InterfaceId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Системный пользователь",
                            Phone = "Нет",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id1")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Login")
                        .HasComment("Логин");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash")
                        .HasComment("Хэш пароля");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Айди");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts", "System");

                    b.HasComment("Аккаунты пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("GameRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameRoleId")
                        .HasComment("Айди роли в игре");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Айди интерфейса");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Айди пользователя");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameRoleId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGames", "BaseGame");

                    b.HasComment("Игры пользователя");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGameCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterId")
                        .HasComment("Айди персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Айди интерфейса");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserGameId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGameId")
                        .HasComment("Айди пользователя игры");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("UserGameId");

                    b.ToTable("UserGameCharacters", "GameInstance");

                    b.HasComment("Персонажи пользователя игры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SystemRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SystemRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "System");

                    b.HasComment("Роли пользователей");
                });

            modelBuilder.Entity("TextFileUser", b =>
                {
                    b.Property<Guid>("TextFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("TextFilesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TextFileUser", "System");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Characteristic", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("InteractionId")
                        .HasColumnType("uuid")
                        .HasColumnName("InteractionId")
                        .HasComment("Айди взаимодействия");

                    b.Property<int>("MaxCondition")
                        .HasColumnType("integer")
                        .HasColumnName("MaxCondition")
                        .HasComment("Максимальное значение");

                    b.Property<int>("MinCondition")
                        .HasColumnType("integer")
                        .HasColumnName("MinCondition")
                        .HasComment("Минимальное значение");

                    b.HasIndex("InteractionId");

                    b.ToTable("Characteristics", "InteractionRules");

                    b.HasComment("Характеристики");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Event", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasComment("Событие активно");

                    b.HasIndex("GameId");

                    b.ToTable("Events", "GameRules");

                    b.HasComment("События");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Item", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("ItemTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("ItemTemplateId")
                        .HasComment("Айди шаблона предмета");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("MaxQuantity")
                        .HasComment("Максимальное количество в стаке");

                    b.Property<Guid?>("ScriptId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScriptId")
                        .HasComment("Айди скрипта");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid")
                        .HasColumnName("SlotId")
                        .HasComment("Айди слота");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("Weight")
                        .HasComment("Вес");

                    b.HasIndex("ItemTemplateId");

                    b.HasIndex("ScriptId");

                    b.HasIndex("SlotId");

                    b.ToTable("Items", "GameRules");

                    b.HasComment("Предметы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Modifier", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.HasIndex("GameId");

                    b.ToTable("Modifiers", "GameRules");

                    b.HasComment("Модификаторы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.NotificationDeletedItem", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Notification");

                    b.Property<Guid>("BagId")
                        .HasColumnType("uuid")
                        .HasColumnName("BagId")
                        .HasComment("Айди сумки");

                    b.HasIndex("BagId");

                    b.ToTable("NotificationsDeletedItems", "Notifications");

                    b.HasComment("Модификаторы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.NotificationTradeRequest", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Notification");

                    b.Property<Guid>("ReceiveBagId")
                        .HasColumnType("uuid")
                        .HasColumnName("ReceiveBagId")
                        .HasComment("Айди сумки-получателя");

                    b.Property<Guid?>("ReceiveCharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourceBagId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceBagId")
                        .HasComment("Айди сумки-отправителя");

                    b.HasIndex("ReceiveCharacterId");

                    b.HasIndex("SourceBagId");

                    b.ToTable("NotificationTradeRequests", "Notifications");

                    b.HasComment("Уведомления о намерении передать предметы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Slot", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.HasIndex("GameId");

                    b.ToTable("Slots", "GameRules");

                    b.HasComment("Слоты");
                });

            modelBuilder.Entity("AbilityCreature", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConditionCreature", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Condition", null)
                        .WithMany()
                        .HasForeignKey("ConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameImgFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", null)
                        .WithMany()
                        .HasForeignKey("ImgFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameTextFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", null)
                        .WithMany()
                        .HasForeignKey("TextFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImgFileUser", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", null)
                        .WithMany()
                        .HasForeignKey("ImgFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotificationUser", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Notification", null)
                        .WithMany()
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ReceiversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Ability", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "AttackParameter")
                        .WithMany("Abilities")
                        .HasForeignKey("AttackParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureTemplate", "CreatureTemplate")
                        .WithMany("Abilities")
                        .HasForeignKey("CreatureTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttackParameter");

                    b.Navigation("CreatureTemplate");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Action", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Interaction", "Interaction")
                        .WithMany("Actions")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioAction")
                        .WithOne("Action")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Action", "ScenarioActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interaction");

                    b.Navigation("ScenarioAction");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ActiveCycle", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ModifierScript", "ModifierScript")
                        .WithMany("ActiveCycles")
                        .HasForeignKey("ModifierScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModifierScript");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Activity", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ApplicationArea", "ApplicationArea")
                        .WithMany("Activities")
                        .HasForeignKey("ApplicationAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Activity")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Activity", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Interaction", "Interaction")
                        .WithMany("Activities")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationArea");

                    b.Navigation("ImgFile");

                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ActivityAction", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Action", "Action")
                        .WithMany("ActivityActions")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Activity", "Activity")
                        .WithMany("ActivityActions")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Activity");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.AppliedCondition", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Ability", "Ability")
                        .WithMany("AppliedConditions")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Condition", "Condition")
                        .WithMany("AppliedConditions")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Article", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Articles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Bag", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", null)
                        .WithOne("Bag")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Bag", "CharacterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Bag")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Bag", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Instance", "Instance")
                        .WithMany("Bags")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImgFile");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BagItem", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Bag", "Bag")
                        .WithMany("BagItems")
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Item", "Item")
                        .WithMany("BagItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bag");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Body", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("Bodies")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Item", "Item")
                        .WithMany("Bodies")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Slot", "Slot")
                        .WithMany("Bodies")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Item");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyTemplate", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("BodyTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sindie.ApiService.Core.Entities.BodyTemplatePart", "BodyTemplateParts", b1 =>
                        {
                            b1.Property<Guid>("BodyTemplateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<double>("DamageModifier")
                                .HasColumnType("double precision")
                                .HasColumnName("DamageModifer")
                                .HasComment("Модификатор урона");

                            b1.Property<int>("HitPenalty")
                                .HasColumnType("integer")
                                .HasColumnName("HitPenalty")
                                .HasComment("Пенальти за прицеливание");

                            b1.Property<int>("MaxToHit")
                                .HasColumnType("integer")
                                .HasColumnName("MaxToHit")
                                .HasComment("Максимальное значение попадания");

                            b1.Property<int>("MinToHit")
                                .HasColumnType("integer")
                                .HasColumnName("MinToHit")
                                .HasComment("Минимальное значение попадания");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name")
                                .HasComment("Название");

                            b1.HasKey("BodyTemplateId", "Id");

                            b1.ToTable("BodyTemplatePart", "GameRules");

                            b1.WithOwner()
                                .HasForeignKey("BodyTemplateId");
                        });

                    b.Navigation("BodyTemplateParts");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Bag", null)
                        .WithOne("Character")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "BagId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.CharacterTemplate", "CharacterTemplate")
                        .WithMany("Characters")
                        .HasForeignKey("CharacterTemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Character")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Instance", "Instance")
                        .WithMany("Characters")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", "TextFile")
                        .WithOne("Character")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "TextFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.UserGameCharacter", "UserGameActivated")
                        .WithOne("ActivateCharacter")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "UserGameActivatedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CharacterTemplate");

                    b.Navigation("ImgFile");

                    b.Navigation("Instance");

                    b.Navigation("TextFile");

                    b.Navigation("UserGameActivated");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterModifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("CharacterModifiers")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany("CharacterModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterParameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("CharacterParameters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "Parameter")
                        .WithMany("CharacterParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplate", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("CharacterTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("CharacterTemplate")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.CharacterTemplate", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("CharacterTemplates")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("ImgFile");

                    b.Navigation("Interface");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplateModifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.CharacterTemplate", "CharacterTemplate")
                        .WithMany("CharacterTemplateModifiers")
                        .HasForeignKey("CharacterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany("CharacterTemplateModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterTemplate");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplateSlot", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.CharacterTemplate", "CharacterTemplate")
                        .WithMany("CharacterTemplateSlots")
                        .HasForeignKey("CharacterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Slot", "Slot")
                        .WithMany("CharacterTemplateSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterTemplate");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Condition", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Conditions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Creature", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.BodyTemplate", "BodyTemplate")
                        .WithMany("Creatures")
                        .HasForeignKey("BodyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureTemplate", "CreatureTemplate")
                        .WithMany("Creatures")
                        .HasForeignKey("CreatureTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Creature")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Creature", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Instance", "Instance")
                        .WithMany("Creatures")
                        .HasForeignKey("InstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sindie.ApiService.Core.Entities.BodyPart", "BodyParts", b1 =>
                        {
                            b1.Property<Guid>("CreatureId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("CurrentArmor")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentArmor")
                                .HasComment("Текущая броня");

                            b1.Property<double>("DamageModifier")
                                .HasColumnType("double precision")
                                .HasColumnName("DamageModifer")
                                .HasComment("Модификатор урона");

                            b1.Property<int>("HitPenalty")
                                .HasColumnType("integer")
                                .HasColumnName("HitPenalty")
                                .HasComment("Пенальти за прицеливание");

                            b1.Property<int>("MaxToHit")
                                .HasColumnType("integer")
                                .HasColumnName("MaxToHit")
                                .HasComment("Максимальное значение попадания");

                            b1.Property<int>("MinToHit")
                                .HasColumnType("integer")
                                .HasColumnName("MinToHit")
                                .HasComment("Минимальное значение попадания");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name")
                                .HasComment("Название");

                            b1.Property<int>("StartingArmor")
                                .HasColumnType("integer")
                                .HasColumnName("StartingArmor")
                                .HasComment("Начальная броня");

                            b1.HasKey("CreatureId", "Id");

                            b1.ToTable("Creatures_BodyParts", "GameInstance");

                            b1.WithOwner()
                                .HasForeignKey("CreatureId");
                        });

                    b.Navigation("BodyParts");

                    b.Navigation("BodyTemplate");

                    b.Navigation("CreatureTemplate");

                    b.Navigation("ImgFile");

                    b.Navigation("Instance");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureParameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", "Creature")
                        .WithMany("CreatureParameters")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "Parameter")
                        .WithMany("CreatureParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplate", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.BodyTemplate", "BodyTemplate")
                        .WithMany("CreatureTemplates")
                        .HasForeignKey("BodyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("CreatureTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("CreatureTemplate")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.CreatureTemplate", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsMany("Sindie.ApiService.Core.Entities.BodyPart", "BodyParts", b1 =>
                        {
                            b1.Property<Guid>("CreatureTemplateId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("CurrentArmor")
                                .HasColumnType("integer")
                                .HasColumnName("CurrentArmor")
                                .HasComment("Текущая броня");

                            b1.Property<double>("DamageModifier")
                                .HasColumnType("double precision")
                                .HasColumnName("DamageModifer")
                                .HasComment("Модификатор урона");

                            b1.Property<int>("HitPenalty")
                                .HasColumnType("integer")
                                .HasColumnName("HitPenalty")
                                .HasComment("Пенальти за прицеливание");

                            b1.Property<int>("MaxToHit")
                                .HasColumnType("integer")
                                .HasColumnName("MaxToHit")
                                .HasComment("Максимальное значение попадания");

                            b1.Property<int>("MinToHit")
                                .HasColumnType("integer")
                                .HasColumnName("MinToHit")
                                .HasComment("Минимальное значение попадания");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Name")
                                .HasComment("Название");

                            b1.Property<int>("StartingArmor")
                                .HasColumnType("integer")
                                .HasColumnName("StartingArmor")
                                .HasComment("Начальная броня");

                            b1.HasKey("CreatureTemplateId", "Id");

                            b1.ToTable("CreatureTemplates_BodyParts", "GameRules");

                            b1.WithOwner()
                                .HasForeignKey("CreatureTemplateId");
                        });

                    b.Navigation("BodyParts");

                    b.Navigation("BodyTemplate");

                    b.Navigation("Game");

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplateParameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureTemplate", "CreatureTemplate")
                        .WithMany("CreatureTemplateParameters")
                        .HasForeignKey("CreatureTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "Parameter")
                        .WithMany("CreatureTemplateParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatureTemplate");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "Avatar")
                        .WithOne("Game")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Game", "AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Instance", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Instances")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Instance")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Instance", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.UserGame", "UserGameActivated")
                        .WithMany("Instances")
                        .HasForeignKey("UserGameActivatedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("ImgFile");

                    b.Navigation("UserGameActivated");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interaction", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Interactions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Interaction")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Interaction", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioLoot")
                        .WithMany("ScenarioLootInteractions")
                        .HasForeignKey("ScenarioLootId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioReturn")
                        .WithMany("ScenarioReturnInteractions")
                        .HasForeignKey("ScenarioReturnId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioVictory")
                        .WithMany("ScenarioVictoryInteractions")
                        .HasForeignKey("ScenarioVictoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", "TextFile")
                        .WithOne("Interaction")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Interaction", "TextFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("ImgFile");

                    b.Navigation("ScenarioLoot");

                    b.Navigation("ScenarioReturn");

                    b.Navigation("ScenarioVictory");

                    b.Navigation("TextFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.InteractionItem", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Activity", "Activity")
                        .WithMany("InteractionItems")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.InteractionsRole", "InteractionsRole")
                        .WithMany("InteractionItems")
                        .HasForeignKey("InteractionsRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Item", "Item")
                        .WithMany("InteractionItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("InteractionsRole");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.InteractionsRole", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("InteractionsRole")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.InteractionsRole", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Interaction", "Interaction")
                        .WithMany("InteractionsRoles")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioCharacteristics")
                        .WithMany("ScenarioCharacteristicsRoles")
                        .HasForeignKey("ScenarioCharacteristicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioInitiative")
                        .WithMany("ScenarioInitiativeRoles")
                        .HasForeignKey("ScenarioInitiativeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioLoot")
                        .WithMany("ScenarioLootRoles")
                        .HasForeignKey("ScenarioLootId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioPrerequisites")
                        .WithMany("ScenarioPrerequisitesRoles")
                        .HasForeignKey("ScenarioPrerequisitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioReturn")
                        .WithMany("ScenarioReturnRoles")
                        .HasForeignKey("ScenarioReturnId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioVictory")
                        .WithMany("ScenarioVictoryRoles")
                        .HasForeignKey("ScenarioVictoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", "TextFile")
                        .WithOne("InteractionsRole")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.InteractionsRole", "TextFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImgFile");

                    b.Navigation("Interaction");

                    b.Navigation("ScenarioCharacteristics");

                    b.Navigation("ScenarioInitiative");

                    b.Navigation("ScenarioLoot");

                    b.Navigation("ScenarioPrerequisites");

                    b.Navigation("ScenarioReturn");

                    b.Navigation("ScenarioVictory");

                    b.Navigation("TextFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.InteractionsRoleActivity", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Activity", "Activity")
                        .WithMany("InteractionsRoleActivities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.InteractionsRole", "InteractionsRole")
                        .WithMany("InteractionsRoleActivities")
                        .HasForeignKey("InteractionsRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("InteractionsRole");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplate", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("ItemTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("ItemTemplate")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.ItemTemplate", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplateModifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ItemTemplate", "ItemTemplate")
                        .WithMany("ItemTemplateModifiers")
                        .HasForeignKey("ItemTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany("ItemTemplateModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTemplate");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ModifierScript", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Event", "Event")
                        .WithMany("ModifierScripts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany("ModifierScripts")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "Script")
                        .WithMany("ModifierScripts")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Modifier");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Parameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Parameters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.ParameterBound", "ParameterBounds", b1 =>
                        {
                            b1.Property<Guid>("ParameterId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("MaxValueParameter")
                                .HasColumnType("integer")
                                .HasColumnName("MaxValueParameters")
                                .HasComment("Максимальные значения параметра");

                            b1.Property<int>("MinValueParameter")
                                .HasColumnType("integer")
                                .HasColumnName("MinValueParameters")
                                .HasComment("Минимальные значения параметра");

                            b1.HasKey("ParameterId");

                            b1.ToTable("Parameters", "GameRules");

                            b1.WithOwner()
                                .HasForeignKey("ParameterId");
                        });

                    b.Navigation("Game");

                    b.Navigation("ParameterBounds");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Party", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Party")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Party", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Interaction", "Interaction")
                        .WithMany("Parties")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioLoot")
                        .WithMany("ScenarioLootParties")
                        .HasForeignKey("ScenarioLootId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioReturn")
                        .WithMany("ScenarioReturnParties")
                        .HasForeignKey("ScenarioReturnId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "ScenarioVictory")
                        .WithMany("ScenarioVictoryParties")
                        .HasForeignKey("ScenarioVictoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", "TextFile")
                        .WithOne("Party")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Party", "TextFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImgFile");

                    b.Navigation("Interaction");

                    b.Navigation("ScenarioLoot");

                    b.Navigation("ScenarioReturn");

                    b.Navigation("ScenarioVictory");

                    b.Navigation("TextFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.PartyInteractionsRole", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.InteractionsRole", "InteractionsRole")
                        .WithMany("PartyInteractionsRoles")
                        .HasForeignKey("InteractionsRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Party", "Party")
                        .WithMany("PartyInteractionsRoles")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractionsRole");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Prerequisite", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Prerequisite")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Prerequisite", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Script", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Scripts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ScriptPrerequisites", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", "Prerequisite")
                        .WithMany("ScriptPrerequisites")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "Script")
                        .WithMany("ScriptPrerequisites")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prerequisite");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "Avatar")
                        .WithOne("UserAvatar")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.User", "AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("Users")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Interface");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserAccount", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.GameRole", "GameRole")
                        .WithMany("UserGames")
                        .HasForeignKey("GameRoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("UserGames")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameRole");

                    b.Navigation("Interface");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGameCharacter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("UserGameCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("UserGameCharacters")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.UserGame", "UserGame")
                        .WithMany("UserGameCharacters")
                        .HasForeignKey("UserGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Interface");

                    b.Navigation("UserGame");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.SystemRole", "SystemRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("SystemRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TextFileUser", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", null)
                        .WithMany()
                        .HasForeignKey("TextFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Characteristic", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Characteristic", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Interaction", "Interaction")
                        .WithMany("Characteristics")
                        .HasForeignKey("InteractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interaction");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Event", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Events")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Event", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Item", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Item", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ItemTemplate", "ItemTemplate")
                        .WithMany("Items")
                        .HasForeignKey("ItemTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "Script")
                        .WithMany("Items")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Slot", "Slot")
                        .WithMany("Items")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTemplate");

                    b.Navigation("Script");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Modifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Modifiers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Modifier", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.NotificationDeletedItem", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Bag", "Bag")
                        .WithMany("NotificationDeletedItems")
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Notification", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.NotificationDeletedItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bag");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.NotificationTradeRequest", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Notification", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.NotificationTradeRequest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "ReceiveCharacter")
                        .WithMany("NotificationTradeRequests")
                        .HasForeignKey("ReceiveCharacterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Bag", "SourceBag")
                        .WithMany("NotificationsTradeRequestSource")
                        .HasForeignKey("SourceBagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Sindie.ApiService.Core.Entities.NotificationTradeRequestItem", "BagItems", b1 =>
                        {
                            b1.Property<Guid>("NotificationTradeRequestId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("ItemId")
                                .HasColumnType("uuid")
                                .HasColumnName("ItemId")
                                .HasComment("Айди предмета");

                            b1.Property<string>("ItemName")
                                .HasColumnType("text")
                                .HasColumnName("ItemName")
                                .HasComment("Название предмета");

                            b1.Property<int>("MaxQuantity")
                                .HasColumnType("integer")
                                .HasColumnName("MaxQuantityItem")
                                .HasComment("Максимальное количество предметов");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("QuantityItem")
                                .HasComment("Количество предметов");

                            b1.Property<int>("Stack")
                                .HasColumnType("integer")
                                .HasColumnName("Stack")
                                .HasComment("Стак");

                            b1.Property<double>("TotalWeight")
                                .HasColumnType("double precision")
                                .HasColumnName("TotalWeight")
                                .HasComment("Общий вес стака");

                            b1.HasKey("NotificationTradeRequestId", "Id");

                            b1.ToTable("NotificationTradeRequestItem", "Notifications");

                            b1.WithOwner()
                                .HasForeignKey("NotificationTradeRequestId");
                        });

                    b.Navigation("BagItems");

                    b.Navigation("ReceiveCharacter");

                    b.Navigation("SourceBag");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Slot", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Slots")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Slot", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Ability", b =>
                {
                    b.Navigation("AppliedConditions");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Action", b =>
                {
                    b.Navigation("ActivityActions");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Activity", b =>
                {
                    b.Navigation("ActivityActions");

                    b.Navigation("InteractionItems");

                    b.Navigation("InteractionsRoleActivities");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ApplicationArea", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Bag", b =>
                {
                    b.Navigation("BagItems");

                    b.Navigation("Character");

                    b.Navigation("NotificationDeletedItems");

                    b.Navigation("NotificationsTradeRequestSource");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyTemplate", b =>
                {
                    b.Navigation("CreatureTemplates");

                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.Navigation("Bag");

                    b.Navigation("Bodies");

                    b.Navigation("CharacterModifiers");

                    b.Navigation("CharacterParameters");

                    b.Navigation("NotificationTradeRequests");

                    b.Navigation("UserGameCharacters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplate", b =>
                {
                    b.Navigation("CharacterTemplateModifiers");

                    b.Navigation("CharacterTemplateSlots");

                    b.Navigation("Characters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Condition", b =>
                {
                    b.Navigation("AppliedConditions");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Creature", b =>
                {
                    b.Navigation("CreatureParameters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplate", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("CreatureTemplateParameters");

                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("BodyTemplates");

                    b.Navigation("CharacterTemplates");

                    b.Navigation("Conditions");

                    b.Navigation("CreatureTemplates");

                    b.Navigation("Events");

                    b.Navigation("Instances");

                    b.Navigation("Interactions");

                    b.Navigation("ItemTemplates");

                    b.Navigation("Modifiers");

                    b.Navigation("Parameters");

                    b.Navigation("Scripts");

                    b.Navigation("Slots");

                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameRole", b =>
                {
                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ImgFile", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("Bag");

                    b.Navigation("Character");

                    b.Navigation("CharacterTemplate");

                    b.Navigation("Creature");

                    b.Navigation("CreatureTemplate");

                    b.Navigation("Game");

                    b.Navigation("Instance");

                    b.Navigation("Interaction");

                    b.Navigation("InteractionsRole");

                    b.Navigation("ItemTemplate");

                    b.Navigation("Party");

                    b.Navigation("Prerequisite");

                    b.Navigation("UserAvatar");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Instance", b =>
                {
                    b.Navigation("Bags");

                    b.Navigation("Characters");

                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interaction", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Activities");

                    b.Navigation("Characteristics");

                    b.Navigation("InteractionsRoles");

                    b.Navigation("Parties");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.InteractionsRole", b =>
                {
                    b.Navigation("InteractionItems");

                    b.Navigation("InteractionsRoleActivities");

                    b.Navigation("PartyInteractionsRoles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interface", b =>
                {
                    b.Navigation("CharacterTemplates");

                    b.Navigation("UserGameCharacters");

                    b.Navigation("UserGames");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplate", b =>
                {
                    b.Navigation("ItemTemplateModifiers");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ModifierScript", b =>
                {
                    b.Navigation("ActiveCycles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Parameter", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("CharacterParameters");

                    b.Navigation("CreatureParameters");

                    b.Navigation("CreatureTemplateParameters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Party", b =>
                {
                    b.Navigation("PartyInteractionsRoles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Prerequisite", b =>
                {
                    b.Navigation("ScriptPrerequisites");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Script", b =>
                {
                    b.Navigation("Action");

                    b.Navigation("Items");

                    b.Navigation("ModifierScripts");

                    b.Navigation("ScenarioCharacteristicsRoles");

                    b.Navigation("ScenarioInitiativeRoles");

                    b.Navigation("ScenarioLootInteractions");

                    b.Navigation("ScenarioLootParties");

                    b.Navigation("ScenarioLootRoles");

                    b.Navigation("ScenarioPrerequisitesRoles");

                    b.Navigation("ScenarioReturnInteractions");

                    b.Navigation("ScenarioReturnParties");

                    b.Navigation("ScenarioReturnRoles");

                    b.Navigation("ScenarioVictoryInteractions");

                    b.Navigation("ScenarioVictoryParties");

                    b.Navigation("ScenarioVictoryRoles");

                    b.Navigation("ScriptPrerequisites");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.SystemRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.TextFile", b =>
                {
                    b.Navigation("Character");

                    b.Navigation("Interaction");

                    b.Navigation("InteractionsRole");

                    b.Navigation("Party");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.Navigation("UserAccounts");

                    b.Navigation("UserGames");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.Navigation("Instances");

                    b.Navigation("UserGameCharacters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGameCharacter", b =>
                {
                    b.Navigation("ActivateCharacter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Event", b =>
                {
                    b.Navigation("ModifierScripts");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Item", b =>
                {
                    b.Navigation("BagItems");

                    b.Navigation("Bodies");

                    b.Navigation("InteractionItems");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Modifier", b =>
                {
                    b.Navigation("CharacterModifiers");

                    b.Navigation("CharacterTemplateModifiers");

                    b.Navigation("ItemTemplateModifiers");

                    b.Navigation("ModifierScripts");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Slot", b =>
                {
                    b.Navigation("Bodies");

                    b.Navigation("CharacterTemplateSlots");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
