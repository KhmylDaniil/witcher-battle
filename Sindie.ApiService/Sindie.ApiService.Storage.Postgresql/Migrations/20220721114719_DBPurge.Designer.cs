// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sindie.ApiService.Storage.Postgresql;

#nullable disable

namespace Sindie.ApiService.Storage.Postgresql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220721114719_DBPurge")]
    partial class DBPurge
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AbilityCreature", b =>
                {
                    b.Property<Guid>("AbilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("uuid");

                    b.HasKey("AbilitiesId", "CreaturesId");

                    b.HasIndex("CreaturesId");

                    b.ToTable("CreatureAbilities", "Battles");
                });

            modelBuilder.Entity("AbilityCreatureTemplate", b =>
                {
                    b.Property<Guid>("AbilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatureTemplatesId")
                        .HasColumnType("uuid");

                    b.HasKey("AbilitiesId", "CreatureTemplatesId");

                    b.HasIndex("CreatureTemplatesId");

                    b.ToTable("CreatureTemplateAbilities", "GameRules");
                });

            modelBuilder.Entity("AbilityDamageType", b =>
                {
                    b.Property<Guid>("AbilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DamageTypesId")
                        .HasColumnType("uuid");

                    b.HasKey("AbilitiesId", "DamageTypesId");

                    b.HasIndex("DamageTypesId");

                    b.ToTable("AbilityDamageTypes", "GameRules");
                });

            modelBuilder.Entity("AbilitySkill", b =>
                {
                    b.Property<Guid>("AbilitiesForDefenseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefensiveSkillsId")
                        .HasColumnType("uuid");

                    b.HasKey("AbilitiesForDefenseId", "DefensiveSkillsId");

                    b.HasIndex("DefensiveSkillsId");

                    b.ToTable("DefensiveSkills", "GameRules");
                });

            modelBuilder.Entity("ConditionCreature", b =>
                {
                    b.Property<Guid>("ConditionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("uuid");

                    b.HasKey("ConditionsId", "CreaturesId");

                    b.HasIndex("CreaturesId");

                    b.ToTable("CurrentConditions", "Battles");
                });

            modelBuilder.Entity("CreatureDamageType", b =>
                {
                    b.Property<Guid>("VulnerableCreaturesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VulnerablesId")
                        .HasColumnType("uuid");

                    b.HasKey("VulnerableCreaturesId", "VulnerablesId");

                    b.HasIndex("VulnerablesId");

                    b.ToTable("CreatureVulnerables", "Battles");
                });

            modelBuilder.Entity("CreatureDamageType1", b =>
                {
                    b.Property<Guid>("ResistancesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResistantCreaturesId")
                        .HasColumnType("uuid");

                    b.HasKey("ResistancesId", "ResistantCreaturesId");

                    b.HasIndex("ResistantCreaturesId");

                    b.ToTable("CreatureResistances", "Battles");
                });

            modelBuilder.Entity("CreatureTemplateDamageType", b =>
                {
                    b.Property<Guid>("VulnerableCreatureTemplatesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VulnerablesId")
                        .HasColumnType("uuid");

                    b.HasKey("VulnerableCreatureTemplatesId", "VulnerablesId");

                    b.HasIndex("VulnerablesId");

                    b.ToTable("CreatureTemplateVulnerables", "GameRules");
                });

            modelBuilder.Entity("CreatureTemplateDamageType1", b =>
                {
                    b.Property<Guid>("ResistancesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResistantCreatureTemplatesId")
                        .HasColumnType("uuid");

                    b.HasKey("ResistancesId", "ResistantCreatureTemplatesId");

                    b.HasIndex("ResistantCreatureTemplatesId");

                    b.ToTable("CreatureTemplateResistances", "GameRules");
                });

            modelBuilder.Entity("GameImgFile", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImgFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("GamesId", "ImgFilesId");

                    b.HasIndex("ImgFilesId");

                    b.ToTable("GameImgFile");
                });

            modelBuilder.Entity("GameTextFile", b =>
                {
                    b.Property<Guid>("GamesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TextFilesId")
                        .HasColumnType("uuid");

                    b.HasKey("GamesId", "TextFilesId");

                    b.HasIndex("TextFilesId");

                    b.ToTable("GameTextFile");
                });

            modelBuilder.Entity("ImgFileUser", b =>
                {
                    b.Property<Guid>("ImgFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("ImgFilesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ImgFileUser", "System");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Ability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("Accuracy")
                        .HasColumnType("integer")
                        .HasColumnName("Accuracy")
                        .HasComment("Точность атаки");

                    b.Property<int>("AttackDiceQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("AttackDiceQuantity")
                        .HasComment("Количество кубов атаки");

                    b.Property<Guid>("AttackSkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("AttackSkillId")
                        .HasComment("Навык атаки");

                    b.Property<int>("AttackSpeed")
                        .HasColumnType("integer")
                        .HasColumnName("AttackSpeed")
                        .HasComment("Скорость атаки");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int>("DamageModifier")
                        .HasColumnType("integer")
                        .HasColumnName("DamageModifier")
                        .HasComment("Модификатор атаки");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание способности");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название способности");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttackSkillId");

                    b.HasIndex("GameId");

                    b.ToTable("Abilities", "GameRules");

                    b.HasComment("Способности");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.AppliedCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("AbilityId")
                        .HasColumnType("uuid")
                        .HasColumnName("AbilityId")
                        .HasComment("Айди способнности");

                    b.Property<int>("ApplyChance")
                        .HasColumnType("integer")
                        .HasColumnName("ApplyChance")
                        .HasComment("Шанс применения");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("ConditionId")
                        .HasComment("Айди состояния");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("ConditionId");

                    b.ToTable("AppliedConditions", "GameRules");

                    b.HasComment("Применяемые состояния");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Battle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<DateTime?>("ActivationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActivationTime")
                        .HasComment("Время активации боя");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание боя");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название боя");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserGameActivatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGameActivatedId")
                        .HasComment("Айди активировавшего игру пользователя");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("UserGameActivatedId");

                    b.ToTable("Battles", "Battles");

                    b.HasComment("Экземпляры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("BodyPartTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("BodyPartTypeId")
                        .HasComment("Айди типа части тела");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<double>("DamageModifier")
                        .HasColumnType("double precision")
                        .HasColumnName("DamageModifer")
                        .HasComment("Модификатор урона");

                    b.Property<int>("HitPenalty")
                        .HasColumnType("integer")
                        .HasColumnName("HitPenalty")
                        .HasComment("Пенальти за прицеливание");

                    b.Property<int>("MaxToHit")
                        .HasColumnType("integer")
                        .HasColumnName("MaxToHit")
                        .HasComment("Максимальное значение попадания");

                    b.Property<int>("MinToHit")
                        .HasColumnType("integer")
                        .HasColumnName("MinToHit")
                        .HasComment("Минимальное значение попадания");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BodyPartTypeId");

                    b.ToTable("BodyParts", "GameRules");

                    b.HasComment("Части тела");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyPartType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BodyPartTypes", "GameRules");

                    b.HasComment("Типы частей тела");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8894e0d0-3147-4791-9153-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Head",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8894e0d0-3147-4791-9353-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Torso",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8894e0d0-3147-4791-9553-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Arm",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8894e0d0-3147-4791-9753-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Leg",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8894e0d0-3147-4791-9953-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Wing",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8894e0d0-3147-4791-1153-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Tail",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8894e0d0-3147-4791-1353-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Void",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название шаблона тела");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("BodyTemplates", "GameRules");

                    b.HasComment("Шаблоны тел");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название состояния");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Conditions", "GameRules");

                    b.HasComment("Состояния");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9994e0d0-3147-4791-9053-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Bleed",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8894e0d0-3147-4791-9053-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Poison",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("BattleId")
                        .HasColumnType("uuid")
                        .HasColumnName("BattleId")
                        .HasComment("Айди боя");

                    b.Property<int>("Body")
                        .HasColumnType("integer")
                        .HasColumnName("Body")
                        .HasComment("Телосложение");

                    b.Property<int>("Cra")
                        .HasColumnType("integer")
                        .HasColumnName("Cra")
                        .HasComment("Крафт");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureTemplateId")
                        .HasComment("Айди шаблона существа");

                    b.Property<Guid>("CreatureTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureTypeId")
                        .HasComment("Айди типа существа");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание шаблона");

                    b.Property<int>("Dex")
                        .HasColumnType("integer")
                        .HasColumnName("Dex")
                        .HasComment("Ловкость");

                    b.Property<int>("Emp")
                        .HasColumnType("integer")
                        .HasColumnName("Emp")
                        .HasComment("Эмпатия");

                    b.Property<int>("HP")
                        .HasColumnType("integer")
                        .HasColumnName("HP")
                        .HasComment("Хиты");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<int>("Int")
                        .HasColumnType("integer")
                        .HasColumnName("Int")
                        .HasComment("Интеллект");

                    b.Property<int>("Luck")
                        .HasColumnType("integer")
                        .HasColumnName("Luck")
                        .HasComment("Удача");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название существа");

                    b.Property<int>("Ref")
                        .HasColumnType("integer")
                        .HasColumnName("Ref")
                        .HasComment("Рефлексы");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Speed")
                        .HasColumnType("integer")
                        .HasColumnName("Speed")
                        .HasComment("Скорость");

                    b.Property<int>("Sta")
                        .HasColumnType("integer")
                        .HasColumnName("Sta")
                        .HasComment("Стамина");

                    b.Property<int>("Will")
                        .HasColumnType("integer")
                        .HasColumnName("Will")
                        .HasComment("Воля");

                    b.HasKey("Id");

                    b.HasIndex("BattleId");

                    b.HasIndex("CreatureTemplateId");

                    b.HasIndex("CreatureTypeId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.ToTable("Creatures", "Battles");

                    b.HasComment("Существа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureId")
                        .HasComment("Айди существа");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("SkillId")
                        .HasComment("Айди навыка");

                    b.Property<int>("SkillValue")
                        .HasColumnType("integer")
                        .HasColumnName("SkillValue")
                        .HasComment("Значение навыка");

                    b.Property<string>("StatName")
                        .HasColumnType("text")
                        .HasColumnName("StatName")
                        .HasComment("Название корреспондирующей характеристики");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("SkillId");

                    b.ToTable("CreatureParameters", "Battles");

                    b.HasComment("Параметры существа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("Body")
                        .HasColumnType("integer")
                        .HasColumnName("Body")
                        .HasComment("Телосложение");

                    b.Property<Guid>("BodyTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("BodyTemplateId")
                        .HasComment("Айди шаблона тела");

                    b.Property<int>("Cra")
                        .HasColumnType("integer")
                        .HasColumnName("Cra")
                        .HasComment("Крафт");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("CreatureTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureTypeId")
                        .HasComment("Айди типа существа");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание шаблона");

                    b.Property<int>("Dex")
                        .HasColumnType("integer")
                        .HasColumnName("Dex")
                        .HasComment("Ловкость");

                    b.Property<int>("Emp")
                        .HasColumnType("integer")
                        .HasColumnName("Emp")
                        .HasComment("Эмпатия");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<int>("HP")
                        .HasColumnType("integer")
                        .HasColumnName("HP")
                        .HasComment("Хиты");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<int>("Int")
                        .HasColumnType("integer")
                        .HasColumnName("Int")
                        .HasComment("Интеллект");

                    b.Property<int>("Luck")
                        .HasColumnType("integer")
                        .HasColumnName("Luck")
                        .HasComment("Удача");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название шаблона");

                    b.Property<int>("Ref")
                        .HasColumnType("integer")
                        .HasColumnName("Ref")
                        .HasComment("Рефлексы");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Speed")
                        .HasColumnType("integer")
                        .HasColumnName("Speed")
                        .HasComment("Скорость");

                    b.Property<int>("Sta")
                        .HasColumnType("integer")
                        .HasColumnName("Sta")
                        .HasComment("Стамина");

                    b.Property<int>("Will")
                        .HasColumnType("integer")
                        .HasColumnName("Will")
                        .HasComment("Воля");

                    b.HasKey("Id");

                    b.HasIndex("BodyTemplateId");

                    b.HasIndex("CreatureTypeId");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.ToTable("CreatureTemplates", "GameRules");

                    b.HasComment("Шаблоны существ");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplateSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureId")
                        .HasComment("Айди шаблона существа");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("SkillId")
                        .HasComment("Айди навыка");

                    b.Property<int>("SkillValue")
                        .HasColumnType("integer")
                        .HasColumnName("SkillValue")
                        .HasComment("Значение навыка");

                    b.Property<string>("StatName")
                        .HasColumnType("text")
                        .HasColumnName("StatName")
                        .HasComment("Название корреспондирующей характеристики");

                    b.HasKey("Id");

                    b.HasIndex("CreatureTemplateId");

                    b.HasIndex("SkillId");

                    b.ToTable("CreatureTemplateParameters", "GameRules");

                    b.HasComment("Параметры шаблона существа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CreatureTypes", "GameRules");

                    b.HasComment("Типы существ");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Human",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("04ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Necrophage",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("05ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Specter",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("06ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Beast",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("07ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Cursed",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("08ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Hybrid",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("09ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Insectoid",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("13ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Elementa",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("23ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Relict",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("33ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Ogroid",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("43ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Draconid",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("53ca5eb6-6534-4eea-9616-78e3ef0d572c"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Vampire",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.DamageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DamageTypes", "GameRules");

                    b.HasComment("Типы урона");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42e5a598-f6e6-4ccd-8de3-d0e0963d1a33"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Slashing",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("43e5a598-f6e6-4ccd-8de3-d0e0963d1a33"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Piercing",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("44e5a598-f6e6-4ccd-8de3-d0e0963d1a33"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Bludgeoning",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("45e5a598-f6e6-4ccd-8de3-d0e0963d1a33"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Elemental",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("46e5a598-f6e6-4ccd-8de3-d0e0963d1a33"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Fire",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("47e5a598-f6e6-4ccd-8de3-d0e0963d1a33"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Silver",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid")
                        .HasColumnName("AvatarId")
                        .HasComment("Айди аватара игры");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games", "BaseGame");

                    b.HasComment("Игры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameRoles", "System");

                    b.HasComment("Роли в игре");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "MainMaster",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe117d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Master",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3148-4791-9053-9667cbe137d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Player",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ImgFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("ImgFiles", "System");

                    b.HasComment("Графические файлы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interface", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название интерфейса");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип интерфейса");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Interfaces", "System");

                    b.HasComment("Интерфейсы");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "SystemDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "SystemInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = " SystemLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "SystemInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "GameDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "GameInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d9"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "GameLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "GameInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d5"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "CharacterDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "CharacterInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d0"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "CharacterLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "CharacterInterface"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание навыка");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название навыка");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("StatName")
                        .HasColumnType("text")
                        .HasColumnName("StatName")
                        .HasComment("Название корреспондирующей характеристики");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Skills", "GameRules");

                    b.HasComment("Навыки");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.SystemRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Роль в системе");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SystemRoles", "System");

                    b.HasComment("Роли в системе");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "AndminRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3148-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "UserRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.TextFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("TextFiles", "System");

                    b.HasComment("Текстовые файлы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid")
                        .HasColumnName("AvatarId")
                        .HasComment("Айди аватара");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email")
                        .HasComment("Емэйл пользователя");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Интерфейс пользователя");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Имя пользователя");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Phone")
                        .HasComment("Телефон пользователя");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("InterfaceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users", "System");

                    b.HasComment("Пользователи");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "andmin@email.ru",
                            InterfaceId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Name = "Системный пользователь",
                            Phone = "Нет",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id1")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Login")
                        .HasComment("Логин");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash")
                        .HasComment("Хэш пароля");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Айди");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts", "System");

                    b.HasComment("Аккаунты пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("GameRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameRoleId")
                        .HasComment("Айди роли в игре");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Айди интерфейса");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Айди пользователя");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameRoleId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGames", "BaseGame");

                    b.HasComment("Игры пользователя");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGameCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterId")
                        .HasComment("Айди персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Айди интерфейса");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserGameId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGameId")
                        .HasComment("Айди пользователя игры");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("UserGameId");

                    b.ToTable("UserGameCharacters", "Characters");

                    b.HasComment("Персонажи пользователя игры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SystemRoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SystemRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "System");

                    b.HasComment("Роли пользователей");
                });

            modelBuilder.Entity("TextFileUser", b =>
                {
                    b.Property<Guid>("TextFilesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("TextFilesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("TextFileUser", "System");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyTemplatePart", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.BodyPart");

                    b.Property<Guid>("BodyTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("BodyTemplateId")
                        .HasComment("Айди шаблона тела");

                    b.HasIndex("BodyTemplateId");

                    b.ToTable("BodyTemplateParts", "GameRules");

                    b.HasComment("Части шаблона тела");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Creature");

                    b.Property<DateTime?>("ActivationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ActivationTime")
                        .HasComment("Время активации персонажа");

                    b.Property<Guid?>("UserGameActivatedId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserGameActivatedId")
                        .HasComment("Айди активировашего персонажа пользователя");

                    b.HasIndex("UserGameActivatedId")
                        .IsUnique();

                    b.ToTable("Characters", "Characters");

                    b.HasComment("Персонажи");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreaturePart", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.BodyPart");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureId")
                        .HasComment("Айди существа");

                    b.Property<int>("CurrentArmor")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentArmor")
                        .HasComment("Текущая броня");

                    b.Property<int>("StartingArmor")
                        .HasColumnType("integer")
                        .HasColumnName("StartingArmor")
                        .HasComment("Стартовая броня");

                    b.HasIndex("CreatureId");

                    b.ToTable("CreatureParts", "Battles");

                    b.HasComment("Части существа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplatePart", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.BodyPart");

                    b.Property<int>("Armor")
                        .HasColumnType("integer")
                        .HasColumnName("Armor")
                        .HasComment("Броня");

                    b.Property<Guid>("CreatureTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatureTemplateId")
                        .HasComment("Айди шаблона существа");

                    b.HasIndex("CreatureTemplateId");

                    b.ToTable("CreatureTemplateParts", "GameRules");

                    b.HasComment("Части шаблона существа");
                });

            modelBuilder.Entity("AbilityCreature", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AbilityCreatureTemplate", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureTemplate", null)
                        .WithMany()
                        .HasForeignKey("CreatureTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AbilityDamageType", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.DamageType", null)
                        .WithMany()
                        .HasForeignKey("DamageTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AbilitySkill", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesForDefenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("DefensiveSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConditionCreature", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Condition", null)
                        .WithMany()
                        .HasForeignKey("ConditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureDamageType", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("VulnerableCreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.DamageType", null)
                        .WithMany()
                        .HasForeignKey("VulnerablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureDamageType1", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.DamageType", null)
                        .WithMany()
                        .HasForeignKey("ResistancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("ResistantCreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureTemplateDamageType", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureTemplate", null)
                        .WithMany()
                        .HasForeignKey("VulnerableCreatureTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.DamageType", null)
                        .WithMany()
                        .HasForeignKey("VulnerablesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureTemplateDamageType1", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.DamageType", null)
                        .WithMany()
                        .HasForeignKey("ResistancesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureTemplate", null)
                        .WithMany()
                        .HasForeignKey("ResistantCreatureTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameImgFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", null)
                        .WithMany()
                        .HasForeignKey("ImgFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameTextFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", null)
                        .WithMany()
                        .HasForeignKey("TextFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImgFileUser", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", null)
                        .WithMany()
                        .HasForeignKey("ImgFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Ability", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Skill", "AttackSkill")
                        .WithMany("AbilitiesForAttack")
                        .HasForeignKey("AttackSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Abilities")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttackSkill");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.AppliedCondition", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Ability", "Ability")
                        .WithMany("AppliedConditions")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Condition", "Condition")
                        .WithMany("AppliedConditions")
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Battle", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Battles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Battle")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Battle", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.UserGame", "UserGameActivated")
                        .WithMany("Instances")
                        .HasForeignKey("UserGameActivatedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("ImgFile");

                    b.Navigation("UserGameActivated");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyPart", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.BodyPartType", "BodyPartType")
                        .WithMany("BodyParts")
                        .HasForeignKey("BodyPartTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyPartType");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyTemplate", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("BodyTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Creature", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Battle", "Battle")
                        .WithMany("Creatures")
                        .HasForeignKey("BattleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureTemplate", "CreatureTemplate")
                        .WithMany("Creatures")
                        .HasForeignKey("CreatureTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureType", "CreatureType")
                        .WithMany("Creatures")
                        .HasForeignKey("CreatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Creature")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Creature", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Battle");

                    b.Navigation("CreatureTemplate");

                    b.Navigation("CreatureType");

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureSkill", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", "Creature")
                        .WithMany("CreatureSkills")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Skill", "Skill")
                        .WithMany("CreatureSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplate", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.BodyTemplate", "BodyTemplate")
                        .WithMany("CreatureTemplates")
                        .HasForeignKey("BodyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureType", "CreatureType")
                        .WithMany("CreatureTemplates")
                        .HasForeignKey("CreatureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("CreatureTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("CreatureTemplate")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.CreatureTemplate", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BodyTemplate");

                    b.Navigation("CreatureType");

                    b.Navigation("Game");

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplateSkill", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureTemplate", "CreatureTemplate")
                        .WithMany("CreatureTemplateSkills")
                        .HasForeignKey("CreatureTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Skill", "Skill")
                        .WithMany("CreatureTemplateSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatureTemplate");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "Avatar")
                        .WithOne("Game")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Game", "AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Skill", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Skills")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.Skill+SkillBound", "SkillBounds", b1 =>
                        {
                            b1.Property<Guid>("SkillId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("MaxValueSkill")
                                .HasColumnType("integer")
                                .HasColumnName("MaxValueSkills")
                                .HasComment("Максимальное значение навыка");

                            b1.Property<int>("MinValueSkill")
                                .HasColumnType("integer")
                                .HasColumnName("MinValueSkills")
                                .HasComment("Минимальное значение навыка");

                            b1.HasKey("SkillId");

                            b1.ToTable("Skills", "GameRules");

                            b1.WithOwner()
                                .HasForeignKey("SkillId");
                        });

                    b.Navigation("Game");

                    b.Navigation("SkillBounds");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "Avatar")
                        .WithOne("UserAvatar")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.User", "AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("Users")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Interface");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserAccount", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.GameRole", "GameRole")
                        .WithMany("UserGames")
                        .HasForeignKey("GameRoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("UserGames")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameRole");

                    b.Navigation("Interface");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGameCharacter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("UserGameCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("UserGameCharacters")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.UserGame", "UserGame")
                        .WithMany("UserGameCharacters")
                        .HasForeignKey("UserGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Interface");

                    b.Navigation("UserGame");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.SystemRole", "SystemRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("SystemRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SystemRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TextFileUser", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", null)
                        .WithMany()
                        .HasForeignKey("TextFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyTemplatePart", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.BodyTemplate", "BodyTemplate")
                        .WithMany("BodyTemplateParts")
                        .HasForeignKey("BodyTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.BodyPart", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.BodyTemplatePart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyTemplate");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.UserGameCharacter", "UserGameActivated")
                        .WithOne("ActivateCharacter")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "UserGameActivatedId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("UserGameActivated");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreaturePart", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Creature", "Creature")
                        .WithMany("CreatureParts")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.BodyPart", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.CreaturePart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplatePart", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.CreatureTemplate", "CreatureTemplate")
                        .WithMany("CreatureTemplateParts")
                        .HasForeignKey("CreatureTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.BodyPart", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.CreatureTemplatePart", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatureTemplate");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Ability", b =>
                {
                    b.Navigation("AppliedConditions");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Battle", b =>
                {
                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyPartType", b =>
                {
                    b.Navigation("BodyParts");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyTemplate", b =>
                {
                    b.Navigation("BodyTemplateParts");

                    b.Navigation("CreatureTemplates");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Condition", b =>
                {
                    b.Navigation("AppliedConditions");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Creature", b =>
                {
                    b.Navigation("CreatureParts");

                    b.Navigation("CreatureSkills");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureTemplate", b =>
                {
                    b.Navigation("CreatureTemplateParts");

                    b.Navigation("CreatureTemplateSkills");

                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CreatureType", b =>
                {
                    b.Navigation("CreatureTemplates");

                    b.Navigation("Creatures");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Battles");

                    b.Navigation("BodyTemplates");

                    b.Navigation("CreatureTemplates");

                    b.Navigation("Skills");

                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameRole", b =>
                {
                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ImgFile", b =>
                {
                    b.Navigation("Battle");

                    b.Navigation("Creature");

                    b.Navigation("CreatureTemplate");

                    b.Navigation("Game");

                    b.Navigation("UserAvatar");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interface", b =>
                {
                    b.Navigation("UserGameCharacters");

                    b.Navigation("UserGames");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Skill", b =>
                {
                    b.Navigation("AbilitiesForAttack");

                    b.Navigation("CreatureSkills");

                    b.Navigation("CreatureTemplateSkills");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.SystemRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.Navigation("UserAccounts");

                    b.Navigation("UserGames");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.Navigation("Instances");

                    b.Navigation("UserGameCharacters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGameCharacter", b =>
                {
                    b.Navigation("ActivateCharacter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.Navigation("UserGameCharacters");
                });
#pragma warning restore 612, 618
        }
    }
}
