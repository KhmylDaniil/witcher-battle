// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sindie.ApiService.Storage.Postgresql;

namespace Sindie.ApiService.Storage.Postgresql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220131072212_feature52_ConfigurationFix")]
    partial class feature52_ConfigurationFix
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Text")
                        .HasComment("Текст");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Articles", "System");

                    b
                        .HasComment("Статьи");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Bag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxBagSize")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxOccupiedBagSize")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Bags");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BagItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("BagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("QuantityItem")
                        .HasColumnType("integer");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Stack")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.HasIndex("ItemId");

                    b.ToTable("BagItems");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Body", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int?>("MaxQuantityInSlot")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SlotId");

                    b.ToTable("Body");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("BodyItem");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid?>("BagId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CharacterInInteraction")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TimeActivate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TypeCharacter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserActivateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BagId")
                        .IsUnique();

                    b.HasIndex("GameId");

                    b.HasIndex("UserActivateId")
                        .IsUnique();

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("CharacterCharacteristic");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<double>("ParameterValue")
                        .HasColumnType("double precision");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ParameterId");

                    b.ToTable("CharacterParameters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание шаблона");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла(аватарки)");

                    b.Property<Guid?>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Айди интерфейса");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название шаблона");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("InterfaceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CharacterTemplates", "GameRules");

                    b
                        .HasComment("Шаблоны персонажей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplateModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterTemplateId")
                        .HasComment("Айди шаблона персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifierId")
                        .HasComment("Айди модификатора");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterTemplateId");

                    b.HasIndex("ModifierId");

                    b.ToTable("CharacterTemplateModifiers", "GameRules");

                    b
                        .HasComment("Модификаторы шаблонов персонажей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplateSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("CharacterTemplateId")
                        .HasComment("Айди шаблона персонажа");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid")
                        .HasColumnName("SlotId")
                        .HasComment("Айди слота");

                    b.HasKey("Id");

                    b.HasIndex("CharacterTemplateId");

                    b.HasIndex("SlotId");

                    b.ToTable("CharacterTemplateSlots", "GameRules");

                    b
                        .HasComment("Слоты шаблона персонажа");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Characteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacteristicModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("ModifierId");

                    b.ToTable("CharacteristicModifier");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid")
                        .HasColumnName("AvatarId")
                        .HasComment("Айди аватара игры");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<DateTime?>("DateOfGame")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("StoryAboutRules")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games", "BaseGame");

                    b
                        .HasComment("Игры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameImgFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId");

                    b.ToTable("GameImgFiles", "BaseGame");

                    b
                        .HasComment("Графические файлы игры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("GameRoles", "System");

                    b
                        .HasComment("Роли в игре");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe127d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "MainMaster",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe117d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Master",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3148-4791-9053-9667cbe137d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Player",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameTextFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("TextFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("TextFileId")
                        .HasComment("Айди текстового файла");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("TextFileId");

                    b.ToTable("GameTextFiles", "BaseGame");

                    b
                        .HasComment("Текстовые файлы игры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ImgFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("ImgFiles", "System");

                    b
                        .HasComment("Графические файлы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interface", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название интерфейса");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Type")
                        .HasComment("Тип интерфейса");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Interfaces", "System");

                    b
                        .HasComment("Интерфейсы");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "SystemDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "SystemInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = " SystemLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "SystemInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GameDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "GameInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d9"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "GameLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "GameInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d5"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CharacterDarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "CharacterInterface"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d0"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "CharacterLightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default",
                            Type = "CharacterInterface"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ItemTemplates", "GameRules");

                    b
                        .HasComment("Шаблоны предметов");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplateModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ItemTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("ItemTemplateId")
                        .HasComment("Айди шаблона предмета");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifierId")
                        .HasComment("Айди модификатора");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemTemplateId");

                    b.HasIndex("ModifierId");

                    b.ToTable("ItemTemplateModifiers", "GameRules");

                    b
                        .HasComment("Модификаторы шаблонов предметов");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ModifierParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid");

                    b.Property<double>("ModifierValue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ParameterId");

                    b.ToTable("ModifierParametrs");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ModifierScript", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("EventId")
                        .HasComment("Айди события");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifierId")
                        .HasComment("Айди модификатора");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScriptId")
                        .HasComment("Айди скрипта");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ModifierScripts", "GameRules");

                    b
                        .HasComment("Скрипты модифкатора");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ParameterItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<double>("ItemValue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ParameterId");

                    b.ToTable("ParameterItems");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Prerequisite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание");

                    b.Property<Guid?>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла пререквизита");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImgFileId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Prerequisites", "GameRules");

                    b
                        .HasComment("Пререквизиты");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Роль");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", "System");

                    b
                        .HasComment("Роли");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AndminRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3148-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Script", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("BodyScript")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BodyScript")
                        .HasComment("Тело скрипта");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("Description")
                        .HasComment("Описание");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("IsValid")
                        .HasComment("Валидность скрипта");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("ValidationText")
                        .HasColumnType("text")
                        .HasColumnName("ValidationText")
                        .HasComment("Валидационный текст");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Scripts", "GameRules");

                    b
                        .HasComment("Скрипты");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ScriptPrerequisites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean")
                        .HasColumnName("IsValid")
                        .HasComment("Валидность скрипта");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PrerequisiteId")
                        .HasColumnType("uuid")
                        .HasColumnName("PrerequisiteId")
                        .HasComment("Айди пререквизита");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("ScriptId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScriptId")
                        .HasComment("Айди скрипта");

                    b.Property<string>("ValidationText")
                        .HasColumnType("text")
                        .HasColumnName("ValidationText")
                        .HasComment("Валидационный текст");

                    b.HasKey("Id");

                    b.HasIndex("PrerequisiteId");

                    b.HasIndex("ScriptId");

                    b.ToTable("ScriptPrerequisites", "GameRules");

                    b
                        .HasComment("Пререквизиты скрипта");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.TextFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("TextFiles", "System");

                    b
                        .HasComment("Текстовые файлы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid?>("AvatarId")
                        .HasColumnType("uuid")
                        .HasColumnName("AvatarId")
                        .HasComment("Айди аватара");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email")
                        .HasComment("Емэйл пользователя");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Интерфейс пользователя");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Имя пользователя");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Phone")
                        .HasComment("Телефон пользователя");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId")
                        .IsUnique();

                    b.HasIndex("InterfaceId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users", "System");

                    b
                        .HasComment("Пользователи");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "andmin@email.ru",
                            InterfaceId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Системный пользователь",
                            Phone = "Нет",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id1")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Login")
                        .HasComment("Логин");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash")
                        .HasComment("Хэш пароля");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Айди");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts", "System");

                    b
                        .HasComment("Аккаунты пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCharacters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<Guid>("GameRoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameRoleId")
                        .HasComment("Айди роли в игре");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Айди интерфейса");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Айди пользователя");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("GameRoleId");

                    b.HasIndex("InterfaceId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGames", "BaseGame");

                    b
                        .HasComment("Игры пользователя");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserImgFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)")
                        .HasComment("Айди");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Айди пользователя");

                    b.HasKey("Id");

                    b.HasIndex("ImgFileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserImgFiles", "System");

                    b
                        .HasComment("Графические файлы пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "System");

                    b
                        .HasComment("Роли пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserTextFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)")
                        .HasComment("Айди");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("TextFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("TextFileId")
                        .HasComment("Айди текстового файла");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Айди пользователя");

                    b.HasKey("Id");

                    b.HasIndex("TextFileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTextFiles", "System");

                    b
                        .HasComment("Текстовые файлы пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Event", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasComment("Событие активно");

                    b.HasIndex("GameId");

                    b.ToTable("Events", "GameRules");

                    b
                        .HasComment("События");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Item", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("ItemTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("ItemTemplateId")
                        .HasComment("Айди шаблона предмета");

                    b.Property<Guid?>("ScriptId")
                        .HasColumnType("uuid")
                        .HasColumnName("ScriptId")
                        .HasComment("Айди скрипта");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid")
                        .HasColumnName("SlotId")
                        .HasComment("Айди слота");

                    b.HasIndex("ItemTemplateId");

                    b.HasIndex("ScriptId");

                    b.HasIndex("SlotId");

                    b.ToTable("Items", "GameRules");

                    b
                        .HasComment("Предметы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Modifier", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.HasIndex("GameId");

                    b.ToTable("Modifiers", "GameRules");

                    b
                        .HasComment("Модификаторы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Parameter", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.HasIndex("GameId");

                    b.ToTable("Parameters", "GameRules");

                    b
                        .HasComment("Параметры");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Slot", b =>
                {
                    b.HasBaseType("Sindie.ApiService.Core.Entities.Prerequisite");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("GameId")
                        .HasComment("Айди игры");

                    b.HasIndex("GameId");

                    b.ToTable("Slots", "GameRules");

                    b
                        .HasComment("Слоты");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Article", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Articles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Bag", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Bags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BagItem", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Bag", "Bag")
                        .WithMany("BagItems")
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bag");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Body", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("Bodies")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.BodySlotActivity", "BodySlotActivity", b1 =>
                        {
                            b1.Property<Guid>("BodyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("CounterWearing")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("InActivationTime")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<int>("MaxQuantityWearing")
                                .HasColumnType("integer");

                            b1.Property<int>("PeriodOfInactivity")
                                .HasColumnType("integer");

                            b1.HasKey("BodyId");

                            b1.ToTable("Body");

                            b1.WithOwner()
                                .HasForeignKey("BodyId");
                        });

                    b.Navigation("BodySlotActivity");

                    b.Navigation("Character");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyItem", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("BodyItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.CounterWearing", "CounterWearing", b1 =>
                        {
                            b1.Property<Guid>("BodyItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("QuantityItem")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("TimeWear")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("BodyItemId");

                            b1.ToTable("BodyItem");

                            b1.WithOwner()
                                .HasForeignKey("BodyItemId");
                        });

                    b.Navigation("Character");

                    b.Navigation("CounterWearing");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Bag", "Bag")
                        .WithOne("Character")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "BagId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Characters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.UserCharacter", "UserCharacter")
                        .WithOne("ActivateCharacter")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "UserActivateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bag");

                    b.Navigation("Game");

                    b.Navigation("UserCharacter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterCharacteristic", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("CharacterCharacteristics")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Characteristic", "Characteristic")
                        .WithMany("CharacterCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterParameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("CharacterParameters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplate", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("CharacterTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("CharacterTemplate")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.CharacterTemplate", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("CharacterTemplates")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");

                    b.Navigation("ImgFile");

                    b.Navigation("Interface");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplateModifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.CharacterTemplate", "CharacterTemplate")
                        .WithMany("CharacterTemplateModifiers")
                        .HasForeignKey("CharacterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany("CharacterTemplateModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterTemplate");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplateSlot", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.CharacterTemplate", "CharacterTemplate")
                        .WithMany("CharacterTemplateSlots")
                        .HasForeignKey("CharacterTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Slot", "Slot")
                        .WithMany("CharacterTemplateSlots")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterTemplate");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Characteristic", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Characteristics")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacteristicModifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Characteristic", "Characteristic")
                        .WithMany("CharacteristicModifiers")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "Avatar")
                        .WithOne("Game")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Game", "AvatarId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameImgFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("GameImgFiles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithMany("GameImgFiles")
                        .HasForeignKey("ImgFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameTextFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("GameTextFiles")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", "TextFile")
                        .WithMany("GameTextFiles")
                        .HasForeignKey("TextFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("TextFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplate", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("ItemTemplates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("ItemTemplate")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.ItemTemplate", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Game");

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplateModifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ItemTemplate", "ItemTemplate")
                        .WithMany("ItemTemplateModifiers")
                        .HasForeignKey("ItemTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany("ItemTemplateModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTemplate");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ModifierParameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ModifierScript", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Event", "Event")
                        .WithMany("ModifierScripts")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany("ModifierScripts")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "Script")
                        .WithMany("ModifierScripts")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.Active", "Active", b1 =>
                        {
                            b1.Property<Guid>("ModifierScriptId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("ActivationTime")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("ActivationTime")
                                .HasComment("Время активации скрипта модификатора");

                            b1.Property<int>("NumberOfRepetitions")
                                .HasColumnType("integer")
                                .HasColumnName("NumberOfRepetitions")
                                .HasComment("Количество повторений скрипта модификатора");

                            b1.Property<int>("PeriodOfActivity")
                                .HasColumnType("integer")
                                .HasColumnName("PeriodOfActivity")
                                .HasComment("Период активности скрипта модификатора");

                            b1.Property<int>("PeriodOfInactivity")
                                .HasColumnType("integer")
                                .HasColumnName("PeriodOfInactivity")
                                .HasComment("Период неактивности скрипта модификатора");

                            b1.HasKey("ModifierScriptId");

                            b1.ToTable("ModifierScripts");

                            b1.WithOwner()
                                .HasForeignKey("ModifierScriptId");
                        });

                    b.Navigation("Active");

                    b.Navigation("Event");

                    b.Navigation("Modifier");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ParameterItem", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "Parameter")
                        .WithMany()
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Prerequisite", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithOne("Prerequisite")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Prerequisite", "ImgFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ImgFile");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Script", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Scripts")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ScriptPrerequisites", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", "Prerequisite")
                        .WithMany("ScriptPrerequisites")
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "Script")
                        .WithMany("ScriptPrerequisites")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prerequisite");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.UserImgFile", "Avatar")
                        .WithOne("AvatarUser")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.User", "AvatarId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("Users")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Avatar");

                    b.Navigation("Interface");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserAccount", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserCharacter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("UserCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserCharacters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.GameRole", "GameRole")
                        .WithMany("UserGames")
                        .HasForeignKey("GameRoleId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("UserGames")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameRole");

                    b.Navigation("Interface");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserImgFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithMany("UserImgFiles")
                        .HasForeignKey("ImgFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserImgFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImgFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserTextFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", "TextFile")
                        .WithMany("UserTextFiles")
                        .HasForeignKey("TextFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserTextFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Event", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Events")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Event", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Item", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Item", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.ItemTemplate", "ItemTemplate")
                        .WithMany("Items")
                        .HasForeignKey("ItemTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Script", "Script")
                        .WithMany("Items")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Slot", "Slot")
                        .WithMany("Items")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemTemplate");

                    b.Navigation("Script");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Modifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Modifiers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Modifier", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Parameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Parameters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Parameter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.ParameterBound", "ParameterBounds", b1 =>
                        {
                            b1.Property<Guid>("ParameterId")
                                .HasColumnType("uuid");

                            b1.Property<double>("MaxValueParameter")
                                .HasColumnType("double precision")
                                .HasColumnName("MaxValueParameters")
                                .HasComment("Максимальные значения параметра");

                            b1.Property<double>("MinValueParameter")
                                .HasColumnType("double precision")
                                .HasColumnName("MinValueParameters")
                                .HasComment("Минимальные значения параметра");

                            b1.HasKey("ParameterId");

                            b1.ToTable("Parameters");

                            b1.WithOwner()
                                .HasForeignKey("ParameterId");
                        });

                    b.Navigation("Game");

                    b.Navigation("ParameterBounds");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Slot", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Slots")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Prerequisite", null)
                        .WithOne()
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Slot", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Bag", b =>
                {
                    b.Navigation("BagItems");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.Navigation("Bodies");

                    b.Navigation("BodyItems");

                    b.Navigation("CharacterCharacteristics");

                    b.Navigation("CharacterParameters");

                    b.Navigation("UserCharacters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterTemplate", b =>
                {
                    b.Navigation("CharacterTemplateModifiers");

                    b.Navigation("CharacterTemplateSlots");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Characteristic", b =>
                {
                    b.Navigation("CharacterCharacteristics");

                    b.Navigation("CharacteristicModifiers");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Bags");

                    b.Navigation("Characteristics");

                    b.Navigation("Characters");

                    b.Navigation("CharacterTemplates");

                    b.Navigation("Events");

                    b.Navigation("GameImgFiles");

                    b.Navigation("GameTextFiles");

                    b.Navigation("ItemTemplates");

                    b.Navigation("Modifiers");

                    b.Navigation("Parameters");

                    b.Navigation("Scripts");

                    b.Navigation("Slots");

                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.GameRole", b =>
                {
                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ImgFile", b =>
                {
                    b.Navigation("CharacterTemplate");

                    b.Navigation("Game");

                    b.Navigation("GameImgFiles");

                    b.Navigation("ItemTemplate");

                    b.Navigation("Prerequisite");

                    b.Navigation("UserImgFiles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interface", b =>
                {
                    b.Navigation("CharacterTemplates");

                    b.Navigation("UserGames");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ItemTemplate", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("ItemTemplateModifiers");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Prerequisite", b =>
                {
                    b.Navigation("ScriptPrerequisites");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Script", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("ModifierScripts");

                    b.Navigation("ScriptPrerequisites");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.TextFile", b =>
                {
                    b.Navigation("GameTextFiles");

                    b.Navigation("UserTextFiles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.Navigation("UserAccounts");

                    b.Navigation("UserCharacters");

                    b.Navigation("UserGames");

                    b.Navigation("UserImgFiles");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTextFiles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserCharacter", b =>
                {
                    b.Navigation("ActivateCharacter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserImgFile", b =>
                {
                    b.Navigation("AvatarUser");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Event", b =>
                {
                    b.Navigation("ModifierScripts");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Modifier", b =>
                {
                    b.Navigation("CharacterTemplateModifiers");

                    b.Navigation("ItemTemplateModifiers");

                    b.Navigation("ModifierScripts");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Slot", b =>
                {
                    b.Navigation("CharacterTemplateSlots");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
