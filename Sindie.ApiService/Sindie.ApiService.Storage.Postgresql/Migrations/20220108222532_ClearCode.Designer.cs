// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sindie.ApiService.Storage.Postgresql;

namespace Sindie.ApiService.Storage.Postgresql.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220108222532_ClearCode")]
    partial class ClearCode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Bag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaxBagSize")
                        .HasColumnType("integer");

                    b.Property<int?>("MaxOccupiedBagSize")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Bags");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BagItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("BagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("QuantityItem")
                        .HasColumnType("integer");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Stack")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.HasIndex("ItemId");

                    b.ToTable("BagItems");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Body", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<int?>("MaxQuantityInSlot")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SlotId");

                    b.ToTable("Body");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("BodyItem");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid?>("BagId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CharacterInInteraction")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<DateTime?>("TimeActivate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("TypeCharacter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserActivateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BagId")
                        .IsUnique();

                    b.HasIndex("GameId");

                    b.HasIndex("UserActivateId")
                        .IsUnique();

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacteristicId");

                    b.ToTable("CharacterCharacteristic");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<double>("ParameterValue")
                        .HasColumnType("double precision");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ParameterId");

                    b.ToTable("CharacterParameters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Characteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Characteristic");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacteristicModifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("ModifierId");

                    b.ToTable("CharacteristicModifier");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<DateTime?>("DateOfGame")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<string>("StoryAboutRules")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ImgFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)")
                        .HasComment("Айди");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("ImgFiles", "System");

                    b
                        .HasComment("Графические файлы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interface", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Interface", "System");

                    b
                        .HasComment("Интерфейсы");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "DarkTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "LightTheme",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<bool?>("AutoWear")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("IsRemovable")
                        .HasColumnType("boolean");

                    b.Property<int?>("MaxQuantityItem")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<double?>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Modifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Modifiers");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ModifierParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ModifierId")
                        .HasColumnType("uuid");

                    b.Property<double>("ModifierValue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModifierId");

                    b.HasIndex("ParameterId");

                    b.ToTable("ModifierParametrs");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Parameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ParameterItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<double>("ItemValue")
                        .HasColumnType("double precision");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ParameterId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ParameterId");

                    b.ToTable("ParameterItems");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Роль");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles", "System");

                    b
                        .HasComment("Роли");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3147-4791-9053-9667cbe107d7"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AndminRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        },
                        new
                        {
                            Id = new Guid("8094e0d0-3148-4791-9053-9667cbe107d8"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserRole",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.TextFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)")
                        .HasComment("Айди");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Extension")
                        .HasComment("Расширение файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("название файла");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("Size")
                        .HasComment("размер файла");

                    b.HasKey("Id");

                    b.ToTable("TextFiles", "System");

                    b
                        .HasComment("Текстовые файлы");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("Email")
                        .HasComment("Емэйл пользователя");

                    b.Property<Guid>("InterfaceId")
                        .HasColumnType("uuid")
                        .HasColumnName("InterfaceId")
                        .HasComment("Интерфейс пользователя");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name")
                        .HasComment("Имя пользователя");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("Phone")
                        .HasComment("Телефон пользователя");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InterfaceId");

                    b.ToTable("Users", "System");

                    b
                        .HasComment("Пользователи");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            CreatedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "andmin@email.ru",
                            InterfaceId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d7"),
                            ModifiedByUserId = new Guid("8094e0d0-3137-4791-9053-9667cbe107d6"),
                            ModifiedOn = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Системный пользователь",
                            Phone = "Нет",
                            RoleCreatedUser = "Default",
                            RoleModifiedUser = "Default"
                        });
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id1")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Login")
                        .HasColumnType("text");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash")
                        .HasComment("Хэш пароля");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasComment("Айди");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts", "System");

                    b
                        .HasComment("Аккаунты пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserCharacter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CharacterId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCharacters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserGames");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserImgFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)")
                        .HasComment("Айди");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ImgFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImgFileId")
                        .HasComment("Айди графического файла");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Айди пользователя");

                    b.HasKey("Id");

                    b.HasIndex("ImgFileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserImgFiles", "System");

                    b
                        .HasComment("Графические файлы пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "System");

                    b
                        .HasComment("Роли пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserTextFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)")
                        .HasComment("Айди");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<Guid>("ModifiedByUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("RoleCreatedUser")
                        .HasColumnType("text");

                    b.Property<string>("RoleModifiedUser")
                        .HasColumnType("text");

                    b.Property<Guid>("TextFileId")
                        .HasColumnType("uuid")
                        .HasColumnName("TextFileId")
                        .HasComment("Айди текстового файла");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId")
                        .HasComment("Айди пользователя");

                    b.HasKey("Id");

                    b.HasIndex("TextFileId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTextFiles", "System");

                    b
                        .HasComment("Текстовые файлы пользователей");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Bag", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Bags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BagItem", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Bag", "Bag")
                        .WithMany("BagItems")
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Item", "Item")
                        .WithMany("BagItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bag");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Body", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("Bodies")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Slot", "Slot")
                        .WithMany("Bodies")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.BodySlotActivity", "BodySlotActivity", b1 =>
                        {
                            b1.Property<Guid>("BodyId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("CounterWearing")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("InActivationTime")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<int>("MaxQuantityWearing")
                                .HasColumnType("integer");

                            b1.Property<int>("PeriodOfInactivity")
                                .HasColumnType("integer");

                            b1.HasKey("BodyId");

                            b1.ToTable("Body");

                            b1.WithOwner()
                                .HasForeignKey("BodyId");
                        });

                    b.Navigation("BodySlotActivity");

                    b.Navigation("Character");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.BodyItem", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("BodyItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Item", "Item")
                        .WithMany("BodyItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.CounterWearing", "CounterWearing", b1 =>
                        {
                            b1.Property<Guid>("BodyItemId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("QuantityItem")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("TimeWear")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("BodyItemId");

                            b1.ToTable("BodyItem");

                            b1.WithOwner()
                                .HasForeignKey("BodyItemId");
                        });

                    b.Navigation("Character");

                    b.Navigation("CounterWearing");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Bag", "Bag")
                        .WithOne("Character")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "BagId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Characters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.UserCharacter", "UserCharacter")
                        .WithOne("ActivateCharacter")
                        .HasForeignKey("Sindie.ApiService.Core.Entities.Character", "UserActivateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Bag");

                    b.Navigation("Game");

                    b.Navigation("UserCharacter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterCharacteristic", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("CharacterCharacteristics")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Characteristic", "Characteristic")
                        .WithMany("CharacterCharacteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Characteristic");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacterParameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("CharacterParameters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "Parameter")
                        .WithMany("CharacterParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Characteristic", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Characteristics")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.CharacteristicModifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Characteristic", "Characteristic")
                        .WithMany("CharacteristicModifiers")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany("CharacteristicModifiers")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Characteristic");

                    b.Navigation("Modifier");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Item", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Slot", "Slot")
                        .WithMany("Items")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Modifier", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Modifiers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.ModifierActivity", "ModifierActivity", b1 =>
                        {
                            b1.Property<Guid>("ModifierId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.HasKey("ModifierId");

                            b1.ToTable("Modifiers");

                            b1.WithOwner()
                                .HasForeignKey("ModifierId");

                            b1.OwnsOne("Sindie.ApiService.Core.Entities.ModifierActivation", "ModifierActivation", b2 =>
                                {
                                    b2.Property<Guid>("ModifierActivityModifierId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<bool>("ActivationFromStartGame")
                                        .HasColumnType("boolean");

                                    b2.Property<bool>("ActivationFromWearingInSlot")
                                        .HasColumnType("boolean");

                                    b2.Property<DateTime>("ActivationTime")
                                        .HasColumnType("timestamp without time zone");

                                    b2.HasKey("ModifierActivityModifierId");

                                    b2.ToTable("Modifiers");

                                    b2.WithOwner()
                                        .HasForeignKey("ModifierActivityModifierId");
                                });

                            b1.OwnsOne("Sindie.ApiService.Core.Entities.Periodicity", "Periodicity", b2 =>
                                {
                                    b2.Property<Guid>("ModifierActivityModifierId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<int>("NumberOfRepetitions")
                                        .HasColumnType("integer");

                                    b2.Property<int>("PeriodOfActivity")
                                        .HasColumnType("integer");

                                    b2.Property<int>("PeriodOfInactivity")
                                        .HasColumnType("integer");

                                    b2.HasKey("ModifierActivityModifierId");

                                    b2.ToTable("Modifiers");

                                    b2.WithOwner()
                                        .HasForeignKey("ModifierActivityModifierId");
                                });

                            b1.Navigation("ModifierActivation");

                            b1.Navigation("Periodicity");
                        });

                    b.Navigation("Game");

                    b.Navigation("ModifierActivity");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ModifierParameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Modifier", "Modifier")
                        .WithMany("ModifierParameters")
                        .HasForeignKey("ModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "Parameter")
                        .WithMany("ModifierParameters")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modifier");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Parameter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Parameters")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Sindie.ApiService.Core.Entities.ParameterBound", "ParameterBounds", b1 =>
                        {
                            b1.Property<Guid>("ParameterId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<double?>("MaxValueParameter")
                                .HasColumnType("double precision");

                            b1.Property<double?>("MinValueParameter")
                                .HasColumnType("double precision");

                            b1.HasKey("ParameterId");

                            b1.ToTable("Parameters");

                            b1.WithOwner()
                                .HasForeignKey("ParameterId");
                        });

                    b.Navigation("Game");

                    b.Navigation("ParameterBounds");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ParameterItem", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Item", "Item")
                        .WithMany("ParameterItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.Parameter", "Parameter")
                        .WithMany("ParameterItems")
                        .HasForeignKey("ParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Slot", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("Slots")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Interface", "Interface")
                        .WithMany("Users")
                        .HasForeignKey("InterfaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Interface");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserAccount", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserCharacter", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Character", "Character")
                        .WithMany("UserCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserCharacters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserGame", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Game", "Game")
                        .WithMany("UserGames")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserGames")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserImgFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.ImgFile", "ImgFile")
                        .WithMany("UserImgFiles")
                        .HasForeignKey("ImgFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserImgFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImgFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserTextFile", b =>
                {
                    b.HasOne("Sindie.ApiService.Core.Entities.TextFile", "TextFile")
                        .WithMany("UserTextFiles")
                        .HasForeignKey("TextFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sindie.ApiService.Core.Entities.User", "User")
                        .WithMany("UserTextFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TextFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Bag", b =>
                {
                    b.Navigation("BagItems");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Character", b =>
                {
                    b.Navigation("Bodies");

                    b.Navigation("BodyItems");

                    b.Navigation("CharacterCharacteristics");

                    b.Navigation("CharacterParameters");

                    b.Navigation("UserCharacters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Characteristic", b =>
                {
                    b.Navigation("CharacterCharacteristics");

                    b.Navigation("CharacteristicModifiers");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Game", b =>
                {
                    b.Navigation("Bags");

                    b.Navigation("Characteristics");

                    b.Navigation("Characters");

                    b.Navigation("Modifiers");

                    b.Navigation("Parameters");

                    b.Navigation("Slots");

                    b.Navigation("UserGames");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.ImgFile", b =>
                {
                    b.Navigation("UserImgFiles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Interface", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Item", b =>
                {
                    b.Navigation("BagItems");

                    b.Navigation("BodyItems");

                    b.Navigation("ParameterItems");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Modifier", b =>
                {
                    b.Navigation("CharacteristicModifiers");

                    b.Navigation("ModifierParameters");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Parameter", b =>
                {
                    b.Navigation("CharacterParameters");

                    b.Navigation("ModifierParameters");

                    b.Navigation("ParameterItems");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.Slot", b =>
                {
                    b.Navigation("Bodies");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.TextFile", b =>
                {
                    b.Navigation("UserTextFiles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.User", b =>
                {
                    b.Navigation("UserAccounts");

                    b.Navigation("UserCharacters");

                    b.Navigation("UserGames");

                    b.Navigation("UserImgFiles");

                    b.Navigation("UserRoles");

                    b.Navigation("UserTextFiles");
                });

            modelBuilder.Entity("Sindie.ApiService.Core.Entities.UserCharacter", b =>
                {
                    b.Navigation("ActivateCharacter");
                });
#pragma warning restore 612, 618
        }
    }
}
